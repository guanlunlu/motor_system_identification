
motor_sys_id.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006700  08006700  00016700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b2c  08006b2c  00020820  2**0
                  CONTENTS
  4 .ARM          00000000  08006b2c  08006b2c  00020820  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b2c  08006b2c  00020820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000820  20000000  08006b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000820  08007354  00020820  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  08007354  0002099c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020820  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a564  00000000  00000000  00020849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca3  00000000  00000000  0002adad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018491  00000000  00000000  0002ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3b6  00000000  00000000  00046369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e25  00000000  00000000  0005171f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c9c  00000000  00000000  000db594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000820 	.word	0x20000820
 800012c:	00000000 	.word	0x00000000
 8000130:	080066e4 	.word	0x080066e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000824 	.word	0x20000824
 800014c:	080066e4 	.word	0x080066e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fa4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	e000      	b.n	8000fb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <_write>:
#include "logging.h"

float random_input[] = {10.8284,10.5706,11.5183,11.5189,11.902,11.0753,11.2791,11.7464,10.5519,10.5802,11.2946,11.5067,10.5115,11.0751,10.6003,11.1262,11.5302,11.3835,11.8957,11.7693,11.2904,10.6379,11.4809,11.124,11.5518,11.8655,11.6433,10.8937,10.5712,11.6041,10.9924,11.449,11.6346,11.9866,11.048,10.8706,11.9738,11.584,11.63,11.4773,10.609,11.4475,11.8271,10.9091,11.1546,11.6497,11.2166,10.8567,10.9124,11.0389,10.7498,11.2298,11.8465,11.8638,10.5908,11.857,11.2568,11.2744,10.9785,11.98,11.241,10.8992,10.6361,11.9216,10.6106,11.2511,11.0762,10.9156,11.8707,11.2946,11.1967,11.9115,10.5751,11.6423,11.6553,11.7417,10.688,10.5238,11.5327,11.8024,11.4443,11.6043,11.5881,11.9992,11.8329,10.8498,10.9595,11.0265,11.2699,11.3867,11.769,11.1181,11.7623,10.904,11.1231,11.306,11.2019,10.9308,10.7675,10.7306,11.3575,11.7036,10.5496,11.3017,11.2477,11.933,11.6224,11.3319,11.8361,11.4373,11.7631,10.7397,10.8191,11.5721,10.6956,10.6365,10.9119,10.5045,11.1214,10.5403,11.5647,11.9068,10.8599,10.7713,10.9763,11.8305,11.4781,10.7255,11.522,11.0787,11.0816,11.2496,10.7213,11.3808,11.7684,11.3852,11.9331,11.3342,10.7222,11.975,11.1132,10.7127,11.3473,10.8782,11.2328,11.196,11.9416,10.689,10.7996,10.9789,11.4439,10.6901,11.4769,11.4325,11.7046,10.8718,11.2146,11.084,10.8049,10.5426,11.8525,11.1397,10.713,11.9212,11.1155,10.6968,11.8285,10.6383,10.7433,10.6066,11.048,10.8796,10.7027,11.6747,11.183,11.0243,11.1785,11.7134,11.8975,11.4775,10.8229,11.5194,11.8634,10.8752,11.7913,11.2069,11.2589,11.4006,11.7263,11.6338,11.1934,11.9271,11.4491,11.159,11.737,11.5335,11.5533,11.9807,11.9316,11.7769,10.934,11.3061,11.2717,10.6552,11.121,11.3651,11.8148,11.1601,11.5946,11.8039,11.5735,11.7011,11.5598,11.6126,10.5286,11.829,11.2875,11.195,10.5978,11.5701,11.2334,11.5015,11.5231,10.7993,11.875,11.7988,11.835,11.3159,10.7088,11.1755,11.984,10.8233,11.169,10.9736,11.272,11.8223,11.1596,11.2013,11.71,11.0477,10.8173,11.9987,10.7304,11.4457,11.4245,10.5009,10.5013,11.66,11.591,10.9788,11.1266,11.5237,11.5208,10.8079,11.7546,11.5634,11.7431,10.6418,10.6226,11.646,11.4444,10.8208,10.8203,10.6216,11.0832,11.9282,11.9213,11.0848,10.9038,11.5383,10.9261,11.6653,11.6758,11.1337,10.9232,10.791,10.517,10.7877,11.9749,10.8661,11.7296,10.7047,11.0972,11.4015,10.7653,11.7425,10.7366,11.9819,10.8858,10.8504,10.6525,10.8291,11.4521,11.544,11.6922,11.5444,11.6294,11.5043,11.4501,10.5847,11.3973,10.8405,10.9782,11.5498,10.6762,11.6439,11.2892,11.3309,11.382,10.9945,11.5545,10.7146,10.7425,11.228,11.7903,11.7199,11.3353,11.6085,10.974,10.703,11.2928,10.9661,11.3822,11.2771,11.1463,10.8883,11.0553,11.0895,11.1703,11.2138,11.0817,10.9189,10.6174,11.0546,10.8809,11.5077,11.5144,11.2709,11.5929,11.5812,11.9171,11.191,11.9102,10.9823,11.1907,11.2757,11.492,11.1027,11.4085,11.9798,10.7256,11.5051,11.0157,11.3126,11.2842,11.7439,10.5224,10.9113,11.4645,11.3192,11.8768,10.8999,11.9551,10.8701,11.766,11.541,11.1836,11.7257,10.5331,10.7411,11.5604,11.5617,11.155,11.3736,11.6276,11.9873,11.5435,10.9193,11.6308,10.7568,10.5064,11.2435,10.6199,10.7446,11.855,11.6745,11.62,11.1546,10.5095,11.3772,11.2777,10.6003,11.316,11.0846,10.8237,11.0787,11.4403,11.4886,11.564,11.308,10.9204};
int random_input_size = 400;

int _write(int file, char *ptr, int len){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i ++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e009      	b.n	8000ff6 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	60ba      	str	r2, [r7, #8]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffca 	bl	8000f84 <ITM_SendChar>
	for(int i = 0; i < len; i ++){
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf1      	blt.n	8000fe2 <_write+0x12>
	}
	return len;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <logger_setup>:
void logger_setup(Logger *logger){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	logger->time_stamp = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
	logger->sample_size = sizeof(random_input)/sizeof(float);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f240 1291 	movw	r2, #401	; 0x191
 800101e:	605a      	str	r2, [r3, #4]
	logger->sample_iter_idx = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
	logger->finished_logging = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
	...

08001038 <get_logger_input>:

void log_motor_state(motor *motor, float time_stamp){
	printf("%f, %f, %f\n", time_stamp, motor->driver.pwm_duty, motor->angular_vel);
}

float get_logger_input(Logger *logger){
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	float input_val = random_input[logger->sample_iter_idx];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <get_logger_input+0x40>)
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	60fb      	str	r3, [r7, #12]

	if(logger->sample_iter_idx == logger->sample_size -1){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	3b01      	subs	r3, #1
 8001056:	429a      	cmp	r2, r3
 8001058:	d102      	bne.n	8001060 <get_logger_input+0x28>
		logger->finished_logging = 1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	60da      	str	r2, [r3, #12]
	}
	logger->sample_iter_idx ++;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
	return input_val;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000000 	.word	0x20000000

0800107c <HAL_TIM_PeriodElapsedCallback>:
float duty = 1.0;
float max_voltage = 12.24;
float output_duty = 0;
int sample_idx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d143      	bne.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x98>
		motor_encoder_update(&motor_1);
 800108c:	4824      	ldr	r0, [pc, #144]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800108e:	f000 fb3f 	bl	8001710 <motor_encoder_update>
		tim_cnt ++;
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800109a:	6013      	str	r3, [r2, #0]
		sec = (float)tim_cnt/1000;
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fdab 	bl	8000bfc <__aeabi_i2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	491f      	ldr	r1, [pc, #124]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff feae 	bl	8000e0c <__aeabi_fdiv>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010b6:	601a      	str	r2, [r3, #0]

		if (tim_cnt == 0){
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x4a>
			printf("timestamp, output_voltage, angular_velocity \n");
 80010c0:	481b      	ldr	r0, [pc, #108]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010c2:	f003 fa5b 	bl	800457c <puts>
		}

		if (tim_cnt % 10 == 0){
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010cc:	fb83 2301 	smull	r2, r3, r3, r1
 80010d0:	109a      	asrs	r2, r3, #2
 80010d2:	17cb      	asrs	r3, r1, #31
 80010d4:	1ad2      	subs	r2, r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	1aca      	subs	r2, r1, r3
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d117      	bne.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x98>
			if (logger.finished_logging == 0){
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10d      	bne.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x8c>
				output_duty = get_logger_input(&logger);
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010ee:	f7ff ffa3 	bl	8001038 <get_logger_input>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010f6:	6013      	str	r3, [r2, #0]
				motor_duty_output(&motor_1, output_duty, 1);
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001102:	f000 fa8a 	bl	800161a <motor_duty_output>
				motor_duty_output(&motor_1, 0, 1);
			}
		}

	}
}
 8001106:	e005      	b.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x98>
				motor_duty_output(&motor_1, 0, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001110:	f000 fa83 	bl	800161a <motor_duty_output>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200008cc 	.word	0x200008cc
 8001120:	20000918 	.word	0x20000918
 8001124:	20000978 	.word	0x20000978
 8001128:	447a0000 	.word	0x447a0000
 800112c:	2000097c 	.word	0x2000097c
 8001130:	08006700 	.word	0x08006700
 8001134:	66666667 	.word	0x66666667
 8001138:	20000968 	.word	0x20000968
 800113c:	20000980 	.word	0x20000980

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fd2e 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f81c 	bl	8001184 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 f986 	bl	800145c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001150:	f000 f8e2 	bl	8001318 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001154:	f000 f934 	bl	80013c0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001158:	f000 f85a 	bl	8001210 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  motor_hardware_setup(&motor_1);
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <main+0x38>)
 800115e:	f000 f9cf 	bl	8001500 <motor_hardware_setup>
  motor_driver_initialize(&motor_1);
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <main+0x38>)
 8001164:	f000 fa16 	bl	8001594 <motor_driver_initialize>
  logger_setup(&logger);
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <main+0x3c>)
 800116a:	f7ff ff4d 	bl	8001008 <logger_setup>
  HAL_TIM_Base_Start_IT(&htim3);
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <main+0x40>)
 8001170:	f001 fc5c 	bl	8002a2c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x34>
 8001176:	bf00      	nop
 8001178:	20000918 	.word	0x20000918
 800117c:	20000968 	.word	0x20000968
 8001180:	200008cc 	.word	0x200008cc

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	; 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fd1c 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fff5 	bl	80021bc <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d8:	f000 f98c 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fa62 	bl	80026c0 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001202:	f000 f977 	bl	80014f4 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b092      	sub	sp, #72	; 0x48
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2220      	movs	r2, #32
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fcc8 	bl	8003bd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001240:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_TIM1_Init+0x100>)
 8001242:	4a34      	ldr	r2, [pc, #208]	; (8001314 <MX_TIM1_Init+0x104>)
 8001244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40-1;
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_TIM1_Init+0x100>)
 8001248:	2227      	movs	r2, #39	; 0x27
 800124a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_TIM1_Init+0x100>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1800-1;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <MX_TIM1_Init+0x100>)
 8001254:	f240 7207 	movw	r2, #1799	; 0x707
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_TIM1_Init+0x100>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_TIM1_Init+0x100>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_TIM1_Init+0x100>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126c:	4828      	ldr	r0, [pc, #160]	; (8001310 <MX_TIM1_Init+0x100>)
 800126e:	f001 fc2f 	bl	8002ad0 <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001278:	f000 f93c 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001288:	4619      	mov	r1, r3
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_TIM1_Init+0x100>)
 800128c:	f002 fbb4 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001296:	f000 f92d 	bl	80014f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM1_Init+0x100>)
 80012c0:	f001 ff50 	bl	8003164 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80012ca:	f000 f913 	bl	80014f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM1_Init+0x100>)
 80012f2:	f002 fbdf 	bl	8003ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80012fc:	f000 f8fa 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM1_Init+0x100>)
 8001302:	f000 fb0f 	bl	8001924 <HAL_TIM_MspPostInit>

}
 8001306:	bf00      	nop
 8001308:	3748      	adds	r7, #72	; 0x48
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000083c 	.word	0x2000083c
 8001314:	40012c00 	.word	0x40012c00

08001318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2224      	movs	r2, #36	; 0x24
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fc52 	bl	8003bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_TIM2_Init+0xa4>)
 8001336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_TIM2_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_TIM2_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_TIM2_Init+0xa4>)
 800134a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_TIM2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_TIM2_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800135c:	2303      	movs	r3, #3
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001364:	2301      	movs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_TIM2_Init+0xa4>)
 8001388:	f001 fc94 	bl	8002cb4 <HAL_TIM_Encoder_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001392:	f000 f8af 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_TIM2_Init+0xa4>)
 80013a4:	f002 fb28 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013ae:	f000 f8a1 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000884 	.word	0x20000884

080013c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM3_Init+0x94>)
 80013de:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <MX_TIM3_Init+0x98>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6-1;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM3_Init+0x94>)
 80013e4:	2205      	movs	r2, #5
 80013e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM3_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000-1;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM3_Init+0x94>)
 80013f0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80013f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_TIM3_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM3_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM3_Init+0x94>)
 8001404:	f001 fac2 	bl	800298c <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800140e:	f000 f871 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM3_Init+0x94>)
 8001420:	f001 ff5e 	bl	80032e0 <HAL_TIM_ConfigClockSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800142a:	f000 f863 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM3_Init+0x94>)
 800143c:	f002 fadc 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001446:	f000 f855 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200008cc 	.word	0x200008cc
 8001458:	40000400 	.word	0x40000400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_GPIO_Init+0x90>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <MX_GPIO_Init+0x90>)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_GPIO_Init+0x90>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_GPIO_Init+0x90>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <MX_GPIO_Init+0x90>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_GPIO_Init+0x90>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_GPIO_Init+0x90>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a11      	ldr	r2, [pc, #68]	; (80014ec <MX_GPIO_Init+0x90>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_GPIO_Init+0x90>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_GPIO_Init+0x94>)
 80014c0:	f000 fe64 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0x94>)
 80014de:	f000 fcd1 	bl	8001e84 <HAL_GPIO_Init>

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010c00 	.word	0x40010c00

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <motor_hardware_setup>:
# include <motor.h>

void motor_hardware_setup(motor *motor){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	// L298N motor driver setup
    // EN IN1 IN2 = PA8(PWM) PA9 PA10
	motor->driver.IN1_port = GPIOB;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <motor_hardware_setup+0x84>)
 800150c:	601a      	str	r2, [r3, #0]
    motor->driver.IN1_pin = GPIO_PIN_14;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001514:	809a      	strh	r2, [r3, #4]
	motor->driver.IN2_port = GPIOB;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <motor_hardware_setup+0x84>)
 800151a:	609a      	str	r2, [r3, #8]
    motor->driver.IN2_pin = GPIO_PIN_15;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001522:	819a      	strh	r2, [r3, #12]

	motor->driver.pwm_timer = &htim1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <motor_hardware_setup+0x88>)
 8001528:	619a      	str	r2, [r3, #24]
	motor->driver.pwm_channel = TIM_CHANNEL_1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
	motor->driver.pwm_counter = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
	motor->driver.pwm_duty = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
	motor->driver.max_voltage = 12.24;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <motor_hardware_setup+0x8c>)
 8001544:	629a      	str	r2, [r3, #40]	; 0x28

    // encoder parameter setup
    motor->control_frequency = 1000;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    motor->encoder.enc_timer = &htim2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <motor_hardware_setup+0x90>)
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
    motor->encoder.current_counter = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
    motor->encoder.previous_counter = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
    motor->encoder.count_per_rev = 500;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
    motor->encoder.reduction_ratio = 16;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2210      	movs	r2, #16
 800156c:	631a      	str	r2, [r3, #48]	; 0x30

    HAL_TIM_Encoder_Start_IT(motor->encoder.enc_timer, TIM_CHANNEL_ALL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	213c      	movs	r1, #60	; 0x3c
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fc3f 	bl	8002df8 <HAL_TIM_Encoder_Start_IT>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40010c00 	.word	0x40010c00
 8001588:	2000083c 	.word	0x2000083c
 800158c:	4143d70a 	.word	0x4143d70a
 8001590:	20000884 	.word	0x20000884

08001594 <motor_driver_initialize>:

void motor_driver_initialize(motor *motor){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(motor->driver.pwm_timer, motor->driver.pwm_channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f001 fae2 	bl	8002b70 <HAL_TIM_PWM_Start>
	// initialize as slow decay mode
	HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_RESET);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	f000 fde8 	bl	800218c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_RESET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6898      	ldr	r0, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	899b      	ldrh	r3, [r3, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f000 fde0 	bl	800218c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <motor_driver_initialize+0x4c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015de:	e018      	b.n	8001612 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d105      	bne.n	80015f4 <motor_driver_initialize+0x60>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015f2:	e00e      	b.n	8001612 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d105      	bne.n	8001608 <motor_driver_initialize+0x74>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001606:	e004      	b.n	8001612 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <motor_duty_output>:

void motor_duty_output(motor *motor, float duty_cycle, int dir){
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	if (dir >= 0){
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db10      	blt.n	800164e <motor_duty_output+0x34>
		HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_SET);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	4619      	mov	r1, r3
 8001638:	f000 fda8 	bl	800218c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_RESET);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6898      	ldr	r0, [r3, #8]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	899b      	ldrh	r3, [r3, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	f000 fda0 	bl	800218c <HAL_GPIO_WritePin>
 800164c:	e00f      	b.n	800166e <motor_duty_output+0x54>
	}
	else {
		HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_RESET);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd97 	bl	800218c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_SET);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6898      	ldr	r0, [r3, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	899b      	ldrh	r3, [r3, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	f000 fd8f 	bl	800218c <HAL_GPIO_WritePin>
	}
	int timer_counter_period = motor->driver.pwm_timer->Instance->ARR + 1;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
	motor->driver.pwm_counter = (float)timer_counter_period * duty_cycle;
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff fabe 	bl	8000bfc <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb0d 	bl	8000ca4 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    motor->driver.pwm_duty = duty_cycle;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	621a      	str	r2, [r3, #32]
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <motor_duty_output+0x9c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	681c      	ldr	r4, [r3, #0]
 80016aa:	4610      	mov	r0, r2
 80016ac:	f7ff fc4a 	bl	8000f44 <__aeabi_f2uiz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	6363      	str	r3, [r4, #52]	; 0x34
}
 80016b4:	e027      	b.n	8001706 <motor_duty_output+0xec>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d10a      	bne.n	80016d4 <motor_duty_output+0xba>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	4610      	mov	r0, r2
 80016ca:	f7ff fc3b 	bl	8000f44 <__aeabi_f2uiz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80016d2:	e018      	b.n	8001706 <motor_duty_output+0xec>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d10a      	bne.n	80016f2 <motor_duty_output+0xd8>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff fc2c 	bl	8000f44 <__aeabi_f2uiz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80016f0:	e009      	b.n	8001706 <motor_duty_output+0xec>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	681c      	ldr	r4, [r3, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fc21 	bl	8000f44 <__aeabi_f2uiz>
 8001702:	4603      	mov	r3, r0
 8001704:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd90      	pop	{r4, r7, pc}
	...

08001710 <motor_encoder_update>:

void motor_encoder_update(motor *motor){
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    double rad_per_cnt = ((2*M_PI) / (motor->encoder.count_per_rev * motor->encoder.reduction_ratio * 4));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fe6c 	bl	8000404 <__aeabi_i2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	a11d      	add	r1, pc, #116	; (adr r1, 80017a8 <motor_encoder_update+0x98>)
 8001732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001736:	f7fe fff9 	bl	800072c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    motor->encoder.current_counter = motor->encoder.enc_timer->Instance->CNT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	461a      	mov	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
    motor->encoder.delta_counter = motor->encoder.current_counter - motor->encoder.previous_counter;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	1ad2      	subs	r2, r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	63da      	str	r2, [r3, #60]	; 0x3c

    motor->angular_vel = motor->encoder.delta_counter * rad_per_cnt * motor->control_frequency;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe4e 	bl	8000404 <__aeabi_i2d>
 8001768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176c:	f7fe feb4 	bl	80004d8 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe41 	bl	8000404 <__aeabi_i2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fea5 	bl	80004d8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    motor->encoder.previous_counter = motor->encoder.current_counter;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	401921fb 	.word	0x401921fb

080017b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_TIM_PWM_MspInit+0x34>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 800182c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186e:	d12b      	bne.n	80018c8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	61d3      	str	r3, [r2, #28]
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a0:	2303      	movs	r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <HAL_TIM_Encoder_MspInit+0x84>)
 80018b4:	f000 fae6 	bl	8001e84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	201c      	movs	r0, #28
 80018be:	f000 faaa 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c2:	201c      	movs	r0, #28
 80018c4:	f000 fac3 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_TIM_Base_MspInit+0x44>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d113      	bne.n	8001912 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_TIM_Base_MspInit+0x48>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0x48>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_TIM_Base_MspInit+0x48>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201d      	movs	r0, #29
 8001908:	f000 fa85 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800190c:	201d      	movs	r0, #29
 800190e:	f000 fa9e 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000400 	.word	0x40000400
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_TIM_MspPostInit+0x5c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d118      	bne.n	8001976 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_TIM_MspPostInit+0x60>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_TIM_MspPostInit+0x60>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_TIM_MspPostInit+0x60>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2302      	movs	r3, #2
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_TIM_MspPostInit+0x64>)
 8001972:	f000 fa87 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 f92d 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f001 fab7 	bl	8002f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000884 	.word	0x20000884

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM3_IRQHandler+0x10>)
 80019f6:	f001 faad 	bl	8002f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200008cc 	.word	0x200008cc

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <_kill>:

int _kill(int pid, int sig)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1c:	f002 f8ae 	bl	8003b7c <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2216      	movs	r2, #22
 8001a24:	601a      	str	r2, [r3, #0]
	return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_exit>:

void _exit (int status)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffe7 	bl	8001a12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a44:	e7fe      	b.n	8001a44 <_exit+0x12>

08001a46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e00a      	b.n	8001a6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a58:	f3af 8000 	nop.w
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf0      	blt.n	8001a58 <_read+0x12>
	}

return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_isatty>:

int _isatty(int file)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f002 f834 	bl	8003b7c <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20005000 	.word	0x20005000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000984 	.word	0x20000984
 8001b48:	200009a0 	.word	0x200009a0

08001b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	; (8001b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7e:	f7ff ffe5 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f002 f801 	bl	8003b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b86:	f7ff fadb 	bl	8001140 <main>
  bx lr
 8001b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000820 	.word	0x20000820
  ldr r2, =_sidata
 8001b94:	08006b34 	.word	0x08006b34
  ldr r2, =_sbss
 8001b98:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 8001b9c:	2000099c 	.word	0x2000099c

08001ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC1_2_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x28>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f923 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fdf6 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f93b 	bl	8001e6a <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f903 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000644 	.word	0x20000644
 8001c28:	2000064c 	.word	0x2000064c
 8001c2c:	20000648 	.word	0x20000648

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_IncTick+0x20>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	2000064c 	.word	0x2000064c
 8001c50:	20000988 	.word	0x20000988

08001c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000988 	.word	0x20000988

08001c68 <__NVIC_SetPriorityGrouping>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <__NVIC_EnableIRQ+0x34>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Config>:
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff90 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff2d 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff42 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff90 	bl	8001d58 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5f 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff35 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e169      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8158 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a9a      	ldr	r2, [pc, #616]	; (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05e      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d875      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ec6:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d058      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ecc:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d86f      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d052      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ed8:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d869      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ede:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ee4:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d863      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001eea:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d046      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ef0:	4a90      	ldr	r2, [pc, #576]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d85d      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_GPIO_Init+0xcc>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d859      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <HAL_GPIO_Init+0x80>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f7f 	.word	0x08001f7f
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08001fad 	.word	0x08001fad
 8001f14:	08001fb3 	.word	0x08001fb3
 8001f18:	08001fb3 	.word	0x08001fb3
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fb3 	.word	0x08001fb3
 8001f24:	08001fb3 	.word	0x08001fb3
 8001f28:	08001fb3 	.word	0x08001fb3
 8001f2c:	08001fb3 	.word	0x08001fb3
 8001f30:	08001fb3 	.word	0x08001fb3
 8001f34:	08001fb3 	.word	0x08001fb3
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001fb3 	.word	0x08001fb3
 8001f40:	08001fb3 	.word	0x08001fb3
 8001f44:	08001fb3 	.word	0x08001fb3
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	4a79      	ldr	r2, [pc, #484]	; (8002138 <HAL_GPIO_Init+0x2b4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f56:	e02c      	b.n	8001fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e029      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	3304      	adds	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e024      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e01f      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f86:	2304      	movs	r3, #4
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e013      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	611a      	str	r2, [r3, #16]
          break;
 8001f9e:	e009      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	615a      	str	r2, [r3, #20]
          break;
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          break;
 8001fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d801      	bhi.n	8001fbe <HAL_GPIO_Init+0x13a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_Init+0x13e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_GPIO_Init+0x14c>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x152>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	210f      	movs	r1, #15
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_GPIO_Init+0x2b8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x2b8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_GPIO_Init+0x2b8>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_GPIO_Init+0x2bc>)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <HAL_GPIO_Init+0x2c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_GPIO_Init+0x2c8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e0>
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002064:	2304      	movs	r3, #4
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002070:	2300      	movs	r3, #0
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002082:	492f      	ldr	r1, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x2bc>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800209c:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	492c      	ldr	r1, [pc, #176]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4928      	ldr	r1, [pc, #160]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4922      	ldr	r1, [pc, #136]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	491e      	ldr	r1, [pc, #120]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4918      	ldr	r1, [pc, #96]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4914      	ldr	r1, [pc, #80]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
 8002120:	e021      	b.n	8002166 <HAL_GPIO_Init+0x2e2>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_GPIO_Init+0x304>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	43db      	mvns	r3, r3
 8002160:	4909      	ldr	r1, [pc, #36]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002162:	4013      	ands	r3, r2
 8002164:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ae8e 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	372c      	adds	r7, #44	; 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fcdc 	bl	8001c54 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fcd8 	bl	8001c54 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fcc8 	bl	8001c54 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fcc4 	bl	8001c54 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fc7d 	bl	8001c54 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc79 	bl	8001c54 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc5c 	bl	8001c54 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc58 	bl	8001c54 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc3c 	bl	8001c54 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc38 	bl	8001c54 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 faa6 	bl	8002950 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fc22 	bl	8001c54 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fc1e 	bl	8001c54 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fbdf 	bl	8001c54 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fbdb 	bl	8001c54 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb8f 	bl	8001c54 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb8b 	bl	8001c54 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb79 	bl	8001c54 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff fb75 	bl	8001c54 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb49 	bl	8001c54 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb45 	bl	8001c54 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fb19 	bl	8001c54 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff fb15 	bl	8001c54 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fb02 	bl	8001c54 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff fafe 	bl	8001c54 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7ff fa50 	bl	8001c54 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7ff fa4c 	bl	8001c54 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f9ae 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	08006740 	.word	0x08006740
 800288c:	20000644 	.word	0x20000644
 8002890:	20000648 	.word	0x20000648

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b490      	push	{r4, r7}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_GetSysClockFreq+0xac>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a4:	f240 2301 	movw	r3, #513	; 0x201
 80028a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	e02b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	623b      	str	r3, [r7, #32]
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	443b      	add	r3, r7
 80028e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	08006730 	.word	0x08006730
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	003d0900 	.word	0x003d0900

08002950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <RCC_Delay+0x34>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <RCC_Delay+0x38>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a5b      	lsrs	r3, r3, #9
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800296c:	bf00      	nop
  }
  while (Delay --);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	60fa      	str	r2, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <RCC_Delay+0x1c>
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000644 	.word	0x20000644
 8002988:	10624dd3 	.word	0x10624dd3

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ff90 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fd70 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d001      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e03a      	b.n	8002aba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d009      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <HAL_TIM_Base_Start_IT+0xa0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d010      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	e007      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fe8c 	bl	8001814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 fcce 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start+0x24>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e022      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d109      	bne.n	8002bae <HAL_TIM_PWM_Start+0x3e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e015      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d109      	bne.n	8002bc8 <HAL_TIM_PWM_Start+0x58>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05e      	b.n	8002ca0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x82>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf0:	e013      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x92>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c00:	e00b      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xa2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c10:	e003      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fec4 	bl	80039b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_TIM_PWM_Start+0x138>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIM_PWM_Start+0x138>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d009      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_PWM_Start+0x13c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_TIM_PWM_Start+0x140>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d111      	bne.n	8002c8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d010      	beq.n	8002c9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	e007      	b.n	8002c9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e093      	b.n	8002df0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe fdb7 	bl	8001850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 fbd1 	bl	80034b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4313      	orrs	r3, r2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d54:	f023 030c 	bic.w	r3, r3, #12
 8002d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	4313      	orrs	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	011a      	lsls	r2, r3, #4
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	031b      	lsls	r3, r3, #12
 8002d84:	4313      	orrs	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d110      	bne.n	8002e4a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d001      	beq.n	8002e38 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e089      	b.n	8002f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	e031      	b.n	8002eae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d110      	bne.n	8002e72 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e56:	7b3b      	ldrb	r3, [r7, #12]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d001      	beq.n	8002e60 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e075      	b.n	8002f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e70:	e01d      	b.n	8002eae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e78:	7bbb      	ldrb	r3, [r7, #14]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e7e:	7b7b      	ldrb	r3, [r7, #13]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e84:	7b3b      	ldrb	r3, [r7, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e05e      	b.n	8002f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_TIM_Encoder_Start_IT+0xc4>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d010      	beq.n	8002edc <HAL_TIM_Encoder_Start_IT+0xe4>
 8002eba:	e01f      	b.n	8002efc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fd73 	bl	80039b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0202 	orr.w	r2, r2, #2
 8002ed8:	60da      	str	r2, [r3, #12]
      break;
 8002eda:	e02e      	b.n	8002f3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fd63 	bl	80039b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0204 	orr.w	r2, r2, #4
 8002ef8:	60da      	str	r2, [r3, #12]
      break;
 8002efa:	e01e      	b.n	8002f3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd53 	bl	80039b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2104      	movs	r1, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd4c 	bl	80039b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0202 	orr.w	r2, r2, #2
 8002f26:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0204 	orr.w	r2, r2, #4
 8002f36:	60da      	str	r2, [r3, #12]
      break;
 8002f38:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0202 	mvn.w	r2, #2
 8002f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa6f 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa62 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa71 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0204 	mvn.w	r2, #4
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa45 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa38 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fa47 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b08      	cmp	r3, #8
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0208 	mvn.w	r2, #8
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2204      	movs	r2, #4
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa1b 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fa0e 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa1d 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b10      	cmp	r3, #16
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b10      	cmp	r3, #16
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0210 	mvn.w	r2, #16
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2208      	movs	r2, #8
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9f1 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9e4 	bl	8003468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9f3 	bl	800348c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0201 	mvn.w	r2, #1
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd ffd2 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	2b80      	cmp	r3, #128	; 0x80
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fd32 	bl	8003b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9b7 	bl	800349e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b20      	cmp	r3, #32
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0220 	mvn.w	r2, #32
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fcfd 	bl	8003b56 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800317a:	2302      	movs	r3, #2
 800317c:	e0ac      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	f200 809f 	bhi.w	80032cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031c9 	.word	0x080031c9
 8003198:	080032cd 	.word	0x080032cd
 800319c:	080032cd 	.word	0x080032cd
 80031a0:	080032cd 	.word	0x080032cd
 80031a4:	08003209 	.word	0x08003209
 80031a8:	080032cd 	.word	0x080032cd
 80031ac:	080032cd 	.word	0x080032cd
 80031b0:	080032cd 	.word	0x080032cd
 80031b4:	0800324b 	.word	0x0800324b
 80031b8:	080032cd 	.word	0x080032cd
 80031bc:	080032cd 	.word	0x080032cd
 80031c0:	080032cd 	.word	0x080032cd
 80031c4:	0800328b 	.word	0x0800328b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f9d0 	bl	8003574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
      break;
 8003206:	e062      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa16 	bl	8003640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	619a      	str	r2, [r3, #24]
      break;
 8003248:	e041      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fa5f 	bl	8003714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0208 	orr.w	r2, r2, #8
 8003264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0204 	bic.w	r2, r2, #4
 8003274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69d9      	ldr	r1, [r3, #28]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	61da      	str	r2, [r3, #28]
      break;
 8003288:	e021      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 faa9 	bl	80037e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	021a      	lsls	r2, r3, #8
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	61da      	str	r2, [r3, #28]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_TIM_ConfigClockSource+0x18>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0b3      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x180>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003330:	d03e      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0xd0>
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003336:	f200 8087 	bhi.w	8003448 <HAL_TIM_ConfigClockSource+0x168>
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	f000 8085 	beq.w	800344c <HAL_TIM_ConfigClockSource+0x16c>
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d87f      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003348:	2b70      	cmp	r3, #112	; 0x70
 800334a:	d01a      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0xa2>
 800334c:	2b70      	cmp	r3, #112	; 0x70
 800334e:	d87b      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003350:	2b60      	cmp	r3, #96	; 0x60
 8003352:	d050      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0x116>
 8003354:	2b60      	cmp	r3, #96	; 0x60
 8003356:	d877      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003358:	2b50      	cmp	r3, #80	; 0x50
 800335a:	d03c      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xf6>
 800335c:	2b50      	cmp	r3, #80	; 0x50
 800335e:	d873      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d058      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x136>
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d86f      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003368:	2b30      	cmp	r3, #48	; 0x30
 800336a:	d064      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x156>
 800336c:	2b30      	cmp	r3, #48	; 0x30
 800336e:	d86b      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003370:	2b20      	cmp	r3, #32
 8003372:	d060      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x156>
 8003374:	2b20      	cmp	r3, #32
 8003376:	d867      	bhi.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05c      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x156>
 800337c:	2b10      	cmp	r3, #16
 800337e:	d05a      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003380:	e062      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f000 faee 	bl	8003972 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
      break;
 80033ae:	e04e      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f000 fad7 	bl	8003972 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d2:	609a      	str	r2, [r3, #8]
      break;
 80033d4:	e03b      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f000 fa4e 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2150      	movs	r1, #80	; 0x50
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 faa5 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80033f4:	e02b      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 fa6c 	bl	80038e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2160      	movs	r1, #96	; 0x60
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa95 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003414:	e01b      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fa2e 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa85 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003434:	e00b      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 fa7c 	bl	800393e <TIM_ITRx_SetConfig>
        break;
 8003446:	e002      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800344c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a29      	ldr	r2, [pc, #164]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <TIM_Base_SetConfig+0xbc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <TIM_Base_SetConfig+0xbc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d108      	bne.n	8003524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a07      	ldr	r2, [pc, #28]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 0302 	bic.w	r3, r3, #2
 80035bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <TIM_OC1_SetConfig+0xc8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10c      	bne.n	80035ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0308 	bic.w	r3, r3, #8
 80035d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <TIM_OC1_SetConfig+0xc8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00

08003640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0210 	bic.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <TIM_OC2_SetConfig+0xd0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10d      	bne.n	80036bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a14      	ldr	r2, [pc, #80]	; (8003710 <TIM_OC2_SetConfig+0xd0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d113      	bne.n	80036ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00

08003714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <TIM_OC3_SetConfig+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10d      	bne.n	800378e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <TIM_OC3_SetConfig+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00

080037e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <TIM_OC4_SetConfig+0x98>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d109      	bne.n	800385c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f023 0210 	bic.w	r2, r3, #16
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800390a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	031b      	lsls	r3, r3, #12
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800391c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	431a      	orrs	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4313      	orrs	r3, r2
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e046      	b.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10c      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800

08003ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e03d      	b.n	8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
	...

08003b7c <__errno>:
 8003b7c:	4b01      	ldr	r3, [pc, #4]	; (8003b84 <__errno+0x8>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000650 	.word	0x20000650

08003b88 <__libc_init_array>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	2600      	movs	r6, #0
 8003b8c:	4d0c      	ldr	r5, [pc, #48]	; (8003bc0 <__libc_init_array+0x38>)
 8003b8e:	4c0d      	ldr	r4, [pc, #52]	; (8003bc4 <__libc_init_array+0x3c>)
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	42a6      	cmp	r6, r4
 8003b96:	d109      	bne.n	8003bac <__libc_init_array+0x24>
 8003b98:	f002 fda4 	bl	80066e4 <_init>
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	4d0a      	ldr	r5, [pc, #40]	; (8003bc8 <__libc_init_array+0x40>)
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	; (8003bcc <__libc_init_array+0x44>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	42a6      	cmp	r6, r4
 8003ba8:	d105      	bne.n	8003bb6 <__libc_init_array+0x2e>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb0:	4798      	blx	r3
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7ee      	b.n	8003b94 <__libc_init_array+0xc>
 8003bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bba:	4798      	blx	r3
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	e7f2      	b.n	8003ba6 <__libc_init_array+0x1e>
 8003bc0:	08006b2c 	.word	0x08006b2c
 8003bc4:	08006b2c 	.word	0x08006b2c
 8003bc8:	08006b2c 	.word	0x08006b2c
 8003bcc:	08006b30 	.word	0x08006b30

08003bd0 <memset>:
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4402      	add	r2, r0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	f803 1b01 	strb.w	r1, [r3], #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <__cvt>:
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be6:	461f      	mov	r7, r3
 8003be8:	bfbb      	ittet	lt
 8003bea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003bee:	461f      	movlt	r7, r3
 8003bf0:	2300      	movge	r3, #0
 8003bf2:	232d      	movlt	r3, #45	; 0x2d
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003bfa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003bfc:	7013      	strb	r3, [r2, #0]
 8003bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c00:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003c04:	f023 0820 	bic.w	r8, r3, #32
 8003c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c0c:	d005      	beq.n	8003c1a <__cvt+0x3a>
 8003c0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c12:	d100      	bne.n	8003c16 <__cvt+0x36>
 8003c14:	3501      	adds	r5, #1
 8003c16:	2302      	movs	r3, #2
 8003c18:	e000      	b.n	8003c1c <__cvt+0x3c>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	aa07      	add	r2, sp, #28
 8003c1e:	9204      	str	r2, [sp, #16]
 8003c20:	aa06      	add	r2, sp, #24
 8003c22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c26:	e9cd 3500 	strd	r3, r5, [sp]
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	f000 fdfb 	bl	8004828 <_dtoa_r>
 8003c32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c36:	4606      	mov	r6, r0
 8003c38:	d102      	bne.n	8003c40 <__cvt+0x60>
 8003c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c3c:	07db      	lsls	r3, r3, #31
 8003c3e:	d522      	bpl.n	8003c86 <__cvt+0xa6>
 8003c40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c44:	eb06 0905 	add.w	r9, r6, r5
 8003c48:	d110      	bne.n	8003c6c <__cvt+0x8c>
 8003c4a:	7833      	ldrb	r3, [r6, #0]
 8003c4c:	2b30      	cmp	r3, #48	; 0x30
 8003c4e:	d10a      	bne.n	8003c66 <__cvt+0x86>
 8003c50:	2200      	movs	r2, #0
 8003c52:	2300      	movs	r3, #0
 8003c54:	4620      	mov	r0, r4
 8003c56:	4639      	mov	r1, r7
 8003c58:	f7fc fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8003c5c:	b918      	cbnz	r0, 8003c66 <__cvt+0x86>
 8003c5e:	f1c5 0501 	rsb	r5, r5, #1
 8003c62:	f8ca 5000 	str.w	r5, [sl]
 8003c66:	f8da 3000 	ldr.w	r3, [sl]
 8003c6a:	4499      	add	r9, r3
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4620      	mov	r0, r4
 8003c72:	4639      	mov	r1, r7
 8003c74:	f7fc fe98 	bl	80009a8 <__aeabi_dcmpeq>
 8003c78:	b108      	cbz	r0, 8003c7e <__cvt+0x9e>
 8003c7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c7e:	2230      	movs	r2, #48	; 0x30
 8003c80:	9b07      	ldr	r3, [sp, #28]
 8003c82:	454b      	cmp	r3, r9
 8003c84:	d307      	bcc.n	8003c96 <__cvt+0xb6>
 8003c86:	4630      	mov	r0, r6
 8003c88:	9b07      	ldr	r3, [sp, #28]
 8003c8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c8c:	1b9b      	subs	r3, r3, r6
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	b008      	add	sp, #32
 8003c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	9107      	str	r1, [sp, #28]
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e7f0      	b.n	8003c80 <__cvt+0xa0>

08003c9e <__exponent>:
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	f803 2b02 	strb.w	r2, [r3], #2
 8003ca8:	bfb6      	itet	lt
 8003caa:	222d      	movlt	r2, #45	; 0x2d
 8003cac:	222b      	movge	r2, #43	; 0x2b
 8003cae:	4249      	neglt	r1, r1
 8003cb0:	2909      	cmp	r1, #9
 8003cb2:	7042      	strb	r2, [r0, #1]
 8003cb4:	dd2b      	ble.n	8003d0e <__exponent+0x70>
 8003cb6:	f10d 0407 	add.w	r4, sp, #7
 8003cba:	46a4      	mov	ip, r4
 8003cbc:	270a      	movs	r7, #10
 8003cbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8003cc2:	460a      	mov	r2, r1
 8003cc4:	46a6      	mov	lr, r4
 8003cc6:	fb07 1516 	mls	r5, r7, r6, r1
 8003cca:	2a63      	cmp	r2, #99	; 0x63
 8003ccc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8003cd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003cda:	dcf0      	bgt.n	8003cbe <__exponent+0x20>
 8003cdc:	3130      	adds	r1, #48	; 0x30
 8003cde:	f1ae 0502 	sub.w	r5, lr, #2
 8003ce2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	1c44      	adds	r4, r0, #1
 8003cea:	4561      	cmp	r1, ip
 8003cec:	d30a      	bcc.n	8003d04 <__exponent+0x66>
 8003cee:	f10d 0209 	add.w	r2, sp, #9
 8003cf2:	eba2 020e 	sub.w	r2, r2, lr
 8003cf6:	4565      	cmp	r5, ip
 8003cf8:	bf88      	it	hi
 8003cfa:	2200      	movhi	r2, #0
 8003cfc:	4413      	add	r3, r2
 8003cfe:	1a18      	subs	r0, r3, r0
 8003d00:	b003      	add	sp, #12
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d08:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003d0c:	e7ed      	b.n	8003cea <__exponent+0x4c>
 8003d0e:	2330      	movs	r3, #48	; 0x30
 8003d10:	3130      	adds	r1, #48	; 0x30
 8003d12:	7083      	strb	r3, [r0, #2]
 8003d14:	70c1      	strb	r1, [r0, #3]
 8003d16:	1d03      	adds	r3, r0, #4
 8003d18:	e7f1      	b.n	8003cfe <__exponent+0x60>
	...

08003d1c <_printf_float>:
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	b091      	sub	sp, #68	; 0x44
 8003d22:	460c      	mov	r4, r1
 8003d24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003d28:	4616      	mov	r6, r2
 8003d2a:	461f      	mov	r7, r3
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	f001 fd1d 	bl	800576c <_localeconv_r>
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	9309      	str	r3, [sp, #36]	; 0x24
 8003d38:	f7fc fa0a 	bl	8000150 <strlen>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8003d40:	f8d8 3000 	ldr.w	r3, [r8]
 8003d44:	900a      	str	r0, [sp, #40]	; 0x28
 8003d46:	3307      	adds	r3, #7
 8003d48:	f023 0307 	bic.w	r3, r3, #7
 8003d4c:	f103 0208 	add.w	r2, r3, #8
 8003d50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003d54:	f8d4 b000 	ldr.w	fp, [r4]
 8003d58:	f8c8 2000 	str.w	r2, [r8]
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d64:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003d68:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	4640      	mov	r0, r8
 8003d74:	4b9c      	ldr	r3, [pc, #624]	; (8003fe8 <_printf_float+0x2cc>)
 8003d76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d78:	f7fc fe48 	bl	8000a0c <__aeabi_dcmpun>
 8003d7c:	bb70      	cbnz	r0, 8003ddc <_printf_float+0xc0>
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	4640      	mov	r0, r8
 8003d84:	4b98      	ldr	r3, [pc, #608]	; (8003fe8 <_printf_float+0x2cc>)
 8003d86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d88:	f7fc fe22 	bl	80009d0 <__aeabi_dcmple>
 8003d8c:	bb30      	cbnz	r0, 8003ddc <_printf_float+0xc0>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2300      	movs	r3, #0
 8003d92:	4640      	mov	r0, r8
 8003d94:	4651      	mov	r1, sl
 8003d96:	f7fc fe11 	bl	80009bc <__aeabi_dcmplt>
 8003d9a:	b110      	cbz	r0, 8003da2 <_printf_float+0x86>
 8003d9c:	232d      	movs	r3, #45	; 0x2d
 8003d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da2:	4b92      	ldr	r3, [pc, #584]	; (8003fec <_printf_float+0x2d0>)
 8003da4:	4892      	ldr	r0, [pc, #584]	; (8003ff0 <_printf_float+0x2d4>)
 8003da6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003daa:	bf94      	ite	ls
 8003dac:	4698      	movls	r8, r3
 8003dae:	4680      	movhi	r8, r0
 8003db0:	2303      	movs	r3, #3
 8003db2:	f04f 0a00 	mov.w	sl, #0
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	f02b 0304 	bic.w	r3, fp, #4
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	4633      	mov	r3, r6
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	9700      	str	r7, [sp, #0]
 8003dc6:	aa0f      	add	r2, sp, #60	; 0x3c
 8003dc8:	f000 f9d4 	bl	8004174 <_printf_common>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f040 8090 	bne.w	8003ef2 <_printf_float+0x1d6>
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	b011      	add	sp, #68	; 0x44
 8003dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ddc:	4642      	mov	r2, r8
 8003dde:	4653      	mov	r3, sl
 8003de0:	4640      	mov	r0, r8
 8003de2:	4651      	mov	r1, sl
 8003de4:	f7fc fe12 	bl	8000a0c <__aeabi_dcmpun>
 8003de8:	b148      	cbz	r0, 8003dfe <_printf_float+0xe2>
 8003dea:	f1ba 0f00 	cmp.w	sl, #0
 8003dee:	bfb8      	it	lt
 8003df0:	232d      	movlt	r3, #45	; 0x2d
 8003df2:	4880      	ldr	r0, [pc, #512]	; (8003ff4 <_printf_float+0x2d8>)
 8003df4:	bfb8      	it	lt
 8003df6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <_printf_float+0x2dc>)
 8003dfc:	e7d3      	b.n	8003da6 <_printf_float+0x8a>
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	d142      	bne.n	8003e8e <_printf_float+0x172>
 8003e08:	2306      	movs	r3, #6
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	9206      	str	r2, [sp, #24]
 8003e10:	aa0e      	add	r2, sp, #56	; 0x38
 8003e12:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003e16:	aa0d      	add	r2, sp, #52	; 0x34
 8003e18:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003e1c:	9203      	str	r2, [sp, #12]
 8003e1e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003e22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4628      	mov	r0, r5
 8003e30:	4653      	mov	r3, sl
 8003e32:	910b      	str	r1, [sp, #44]	; 0x2c
 8003e34:	f7ff fed4 	bl	8003be0 <__cvt>
 8003e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e3a:	4680      	mov	r8, r0
 8003e3c:	2947      	cmp	r1, #71	; 0x47
 8003e3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e40:	d108      	bne.n	8003e54 <_printf_float+0x138>
 8003e42:	1cc8      	adds	r0, r1, #3
 8003e44:	db02      	blt.n	8003e4c <_printf_float+0x130>
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	dd40      	ble.n	8003ece <_printf_float+0x1b2>
 8003e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8003e50:	fa5f f989 	uxtb.w	r9, r9
 8003e54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e58:	d81f      	bhi.n	8003e9a <_printf_float+0x17e>
 8003e5a:	464a      	mov	r2, r9
 8003e5c:	3901      	subs	r1, #1
 8003e5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e62:	910d      	str	r1, [sp, #52]	; 0x34
 8003e64:	f7ff ff1b 	bl	8003c9e <__exponent>
 8003e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e6a:	4682      	mov	sl, r0
 8003e6c:	1813      	adds	r3, r2, r0
 8003e6e:	2a01      	cmp	r2, #1
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	dc02      	bgt.n	8003e7a <_printf_float+0x15e>
 8003e74:	6822      	ldr	r2, [r4, #0]
 8003e76:	07d2      	lsls	r2, r2, #31
 8003e78:	d501      	bpl.n	8003e7e <_printf_float+0x162>
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d09b      	beq.n	8003dbe <_printf_float+0xa2>
 8003e86:	232d      	movs	r3, #45	; 0x2d
 8003e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8c:	e797      	b.n	8003dbe <_printf_float+0xa2>
 8003e8e:	2947      	cmp	r1, #71	; 0x47
 8003e90:	d1bc      	bne.n	8003e0c <_printf_float+0xf0>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ba      	bne.n	8003e0c <_printf_float+0xf0>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e7b7      	b.n	8003e0a <_printf_float+0xee>
 8003e9a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003e9e:	d118      	bne.n	8003ed2 <_printf_float+0x1b6>
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	dd0b      	ble.n	8003ebe <_printf_float+0x1a2>
 8003ea6:	6121      	str	r1, [r4, #16]
 8003ea8:	b913      	cbnz	r3, 8003eb0 <_printf_float+0x194>
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	07d0      	lsls	r0, r2, #31
 8003eae:	d502      	bpl.n	8003eb6 <_printf_float+0x19a>
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	440b      	add	r3, r1
 8003eb4:	6123      	str	r3, [r4, #16]
 8003eb6:	f04f 0a00 	mov.w	sl, #0
 8003eba:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ebc:	e7df      	b.n	8003e7e <_printf_float+0x162>
 8003ebe:	b913      	cbnz	r3, 8003ec6 <_printf_float+0x1aa>
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	07d2      	lsls	r2, r2, #31
 8003ec4:	d501      	bpl.n	8003eca <_printf_float+0x1ae>
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	e7f4      	b.n	8003eb4 <_printf_float+0x198>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e7f2      	b.n	8003eb4 <_printf_float+0x198>
 8003ece:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ed4:	4299      	cmp	r1, r3
 8003ed6:	db05      	blt.n	8003ee4 <_printf_float+0x1c8>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	6121      	str	r1, [r4, #16]
 8003edc:	07d8      	lsls	r0, r3, #31
 8003ede:	d5ea      	bpl.n	8003eb6 <_printf_float+0x19a>
 8003ee0:	1c4b      	adds	r3, r1, #1
 8003ee2:	e7e7      	b.n	8003eb4 <_printf_float+0x198>
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	bfcc      	ite	gt
 8003ee8:	2201      	movgt	r2, #1
 8003eea:	f1c1 0202 	rsble	r2, r1, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	e7e0      	b.n	8003eb4 <_printf_float+0x198>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	055a      	lsls	r2, r3, #21
 8003ef6:	d407      	bmi.n	8003f08 <_printf_float+0x1ec>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	4642      	mov	r2, r8
 8003efc:	4631      	mov	r1, r6
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	d12b      	bne.n	8003f5e <_printf_float+0x242>
 8003f06:	e764      	b.n	8003dd2 <_printf_float+0xb6>
 8003f08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f0c:	f240 80dd 	bls.w	80040ca <_printf_float+0x3ae>
 8003f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f14:	2200      	movs	r2, #0
 8003f16:	2300      	movs	r3, #0
 8003f18:	f7fc fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d033      	beq.n	8003f88 <_printf_float+0x26c>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4631      	mov	r1, r6
 8003f24:	4628      	mov	r0, r5
 8003f26:	4a35      	ldr	r2, [pc, #212]	; (8003ffc <_printf_float+0x2e0>)
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f af51 	beq.w	8003dd2 <_printf_float+0xb6>
 8003f30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f34:	429a      	cmp	r2, r3
 8003f36:	db02      	blt.n	8003f3e <_printf_float+0x222>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	07d8      	lsls	r0, r3, #31
 8003f3c:	d50f      	bpl.n	8003f5e <_printf_float+0x242>
 8003f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b8      	blx	r7
 8003f48:	3001      	adds	r0, #1
 8003f4a:	f43f af42 	beq.w	8003dd2 <_printf_float+0xb6>
 8003f4e:	f04f 0800 	mov.w	r8, #0
 8003f52:	f104 091a 	add.w	r9, r4, #26
 8003f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4543      	cmp	r3, r8
 8003f5c:	dc09      	bgt.n	8003f72 <_printf_float+0x256>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	079b      	lsls	r3, r3, #30
 8003f62:	f100 8102 	bmi.w	800416a <_printf_float+0x44e>
 8003f66:	68e0      	ldr	r0, [r4, #12]
 8003f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f6a:	4298      	cmp	r0, r3
 8003f6c:	bfb8      	it	lt
 8003f6e:	4618      	movlt	r0, r3
 8003f70:	e731      	b.n	8003dd6 <_printf_float+0xba>
 8003f72:	2301      	movs	r3, #1
 8003f74:	464a      	mov	r2, r9
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f43f af28 	beq.w	8003dd2 <_printf_float+0xb6>
 8003f82:	f108 0801 	add.w	r8, r8, #1
 8003f86:	e7e6      	b.n	8003f56 <_printf_float+0x23a>
 8003f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dc38      	bgt.n	8004000 <_printf_float+0x2e4>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4631      	mov	r1, r6
 8003f92:	4628      	mov	r0, r5
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <_printf_float+0x2e0>)
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f43f af1a 	beq.w	8003dd2 <_printf_float+0xb6>
 8003f9e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d102      	bne.n	8003fac <_printf_float+0x290>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07d9      	lsls	r1, r3, #31
 8003faa:	d5d8      	bpl.n	8003f5e <_printf_float+0x242>
 8003fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f43f af0b 	beq.w	8003dd2 <_printf_float+0xb6>
 8003fbc:	f04f 0900 	mov.w	r9, #0
 8003fc0:	f104 0a1a 	add.w	sl, r4, #26
 8003fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fc6:	425b      	negs	r3, r3
 8003fc8:	454b      	cmp	r3, r9
 8003fca:	dc01      	bgt.n	8003fd0 <_printf_float+0x2b4>
 8003fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fce:	e794      	b.n	8003efa <_printf_float+0x1de>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4652      	mov	r2, sl
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f43f aef9 	beq.w	8003dd2 <_printf_float+0xb6>
 8003fe0:	f109 0901 	add.w	r9, r9, #1
 8003fe4:	e7ee      	b.n	8003fc4 <_printf_float+0x2a8>
 8003fe6:	bf00      	nop
 8003fe8:	7fefffff 	.word	0x7fefffff
 8003fec:	08006754 	.word	0x08006754
 8003ff0:	08006758 	.word	0x08006758
 8003ff4:	08006760 	.word	0x08006760
 8003ff8:	0800675c 	.word	0x0800675c
 8003ffc:	08006764 	.word	0x08006764
 8004000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004004:	429a      	cmp	r2, r3
 8004006:	bfa8      	it	ge
 8004008:	461a      	movge	r2, r3
 800400a:	2a00      	cmp	r2, #0
 800400c:	4691      	mov	r9, r2
 800400e:	dc37      	bgt.n	8004080 <_printf_float+0x364>
 8004010:	f04f 0b00 	mov.w	fp, #0
 8004014:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004018:	f104 021a 	add.w	r2, r4, #26
 800401c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004020:	ebaa 0309 	sub.w	r3, sl, r9
 8004024:	455b      	cmp	r3, fp
 8004026:	dc33      	bgt.n	8004090 <_printf_float+0x374>
 8004028:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800402c:	429a      	cmp	r2, r3
 800402e:	db3b      	blt.n	80040a8 <_printf_float+0x38c>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	07da      	lsls	r2, r3, #31
 8004034:	d438      	bmi.n	80040a8 <_printf_float+0x38c>
 8004036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004038:	990d      	ldr	r1, [sp, #52]	; 0x34
 800403a:	eba3 020a 	sub.w	r2, r3, sl
 800403e:	eba3 0901 	sub.w	r9, r3, r1
 8004042:	4591      	cmp	r9, r2
 8004044:	bfa8      	it	ge
 8004046:	4691      	movge	r9, r2
 8004048:	f1b9 0f00 	cmp.w	r9, #0
 800404c:	dc34      	bgt.n	80040b8 <_printf_float+0x39c>
 800404e:	f04f 0800 	mov.w	r8, #0
 8004052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004056:	f104 0a1a 	add.w	sl, r4, #26
 800405a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	eba3 0309 	sub.w	r3, r3, r9
 8004064:	4543      	cmp	r3, r8
 8004066:	f77f af7a 	ble.w	8003f5e <_printf_float+0x242>
 800406a:	2301      	movs	r3, #1
 800406c:	4652      	mov	r2, sl
 800406e:	4631      	mov	r1, r6
 8004070:	4628      	mov	r0, r5
 8004072:	47b8      	blx	r7
 8004074:	3001      	adds	r0, #1
 8004076:	f43f aeac 	beq.w	8003dd2 <_printf_float+0xb6>
 800407a:	f108 0801 	add.w	r8, r8, #1
 800407e:	e7ec      	b.n	800405a <_printf_float+0x33e>
 8004080:	4613      	mov	r3, r2
 8004082:	4631      	mov	r1, r6
 8004084:	4642      	mov	r2, r8
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	d1c0      	bne.n	8004010 <_printf_float+0x2f4>
 800408e:	e6a0      	b.n	8003dd2 <_printf_float+0xb6>
 8004090:	2301      	movs	r3, #1
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	920b      	str	r2, [sp, #44]	; 0x2c
 8004098:	47b8      	blx	r7
 800409a:	3001      	adds	r0, #1
 800409c:	f43f ae99 	beq.w	8003dd2 <_printf_float+0xb6>
 80040a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040a2:	f10b 0b01 	add.w	fp, fp, #1
 80040a6:	e7b9      	b.n	800401c <_printf_float+0x300>
 80040a8:	4631      	mov	r1, r6
 80040aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	d1bf      	bne.n	8004036 <_printf_float+0x31a>
 80040b6:	e68c      	b.n	8003dd2 <_printf_float+0xb6>
 80040b8:	464b      	mov	r3, r9
 80040ba:	4631      	mov	r1, r6
 80040bc:	4628      	mov	r0, r5
 80040be:	eb08 020a 	add.w	r2, r8, sl
 80040c2:	47b8      	blx	r7
 80040c4:	3001      	adds	r0, #1
 80040c6:	d1c2      	bne.n	800404e <_printf_float+0x332>
 80040c8:	e683      	b.n	8003dd2 <_printf_float+0xb6>
 80040ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040cc:	2a01      	cmp	r2, #1
 80040ce:	dc01      	bgt.n	80040d4 <_printf_float+0x3b8>
 80040d0:	07db      	lsls	r3, r3, #31
 80040d2:	d537      	bpl.n	8004144 <_printf_float+0x428>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4642      	mov	r2, r8
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f ae77 	beq.w	8003dd2 <_printf_float+0xb6>
 80040e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e8:	4631      	mov	r1, r6
 80040ea:	4628      	mov	r0, r5
 80040ec:	47b8      	blx	r7
 80040ee:	3001      	adds	r0, #1
 80040f0:	f43f ae6f 	beq.w	8003dd2 <_printf_float+0xb6>
 80040f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	f7fc fc54 	bl	80009a8 <__aeabi_dcmpeq>
 8004100:	b9d8      	cbnz	r0, 800413a <_printf_float+0x41e>
 8004102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004104:	f108 0201 	add.w	r2, r8, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	d10e      	bne.n	8004132 <_printf_float+0x416>
 8004114:	e65d      	b.n	8003dd2 <_printf_float+0xb6>
 8004116:	2301      	movs	r3, #1
 8004118:	464a      	mov	r2, r9
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f ae56 	beq.w	8003dd2 <_printf_float+0xb6>
 8004126:	f108 0801 	add.w	r8, r8, #1
 800412a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800412c:	3b01      	subs	r3, #1
 800412e:	4543      	cmp	r3, r8
 8004130:	dcf1      	bgt.n	8004116 <_printf_float+0x3fa>
 8004132:	4653      	mov	r3, sl
 8004134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004138:	e6e0      	b.n	8003efc <_printf_float+0x1e0>
 800413a:	f04f 0800 	mov.w	r8, #0
 800413e:	f104 091a 	add.w	r9, r4, #26
 8004142:	e7f2      	b.n	800412a <_printf_float+0x40e>
 8004144:	2301      	movs	r3, #1
 8004146:	4642      	mov	r2, r8
 8004148:	e7df      	b.n	800410a <_printf_float+0x3ee>
 800414a:	2301      	movs	r3, #1
 800414c:	464a      	mov	r2, r9
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	47b8      	blx	r7
 8004154:	3001      	adds	r0, #1
 8004156:	f43f ae3c 	beq.w	8003dd2 <_printf_float+0xb6>
 800415a:	f108 0801 	add.w	r8, r8, #1
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004162:	1a5b      	subs	r3, r3, r1
 8004164:	4543      	cmp	r3, r8
 8004166:	dcf0      	bgt.n	800414a <_printf_float+0x42e>
 8004168:	e6fd      	b.n	8003f66 <_printf_float+0x24a>
 800416a:	f04f 0800 	mov.w	r8, #0
 800416e:	f104 0919 	add.w	r9, r4, #25
 8004172:	e7f4      	b.n	800415e <_printf_float+0x442>

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4616      	mov	r6, r2
 800417a:	4699      	mov	r9, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	4607      	mov	r7, r0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfb8      	it	lt
 8004186:	4613      	movlt	r3, r2
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800418e:	460c      	mov	r4, r1
 8004190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004194:	b10a      	cbz	r2, 800419a <_printf_common+0x26>
 8004196:	3301      	adds	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0699      	lsls	r1, r3, #26
 800419e:	bf42      	ittt	mi
 80041a0:	6833      	ldrmi	r3, [r6, #0]
 80041a2:	3302      	addmi	r3, #2
 80041a4:	6033      	strmi	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	f015 0506 	ands.w	r5, r5, #6
 80041ac:	d106      	bne.n	80041bc <_printf_common+0x48>
 80041ae:	f104 0a19 	add.w	sl, r4, #25
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6832      	ldr	r2, [r6, #0]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dc28      	bgt.n	800420e <_printf_common+0x9a>
 80041bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041c0:	1e13      	subs	r3, r2, #0
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	bf18      	it	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d42d      	bmi.n	8004228 <_printf_common+0xb4>
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d020      	beq.n	800421c <_printf_common+0xa8>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	68e5      	ldr	r5, [r4, #12]
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	bf18      	it	ne
 80041e6:	2500      	movne	r5, #0
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	f04f 0600 	mov.w	r6, #0
 80041ee:	68a3      	ldr	r3, [r4, #8]
 80041f0:	bf08      	it	eq
 80041f2:	1aad      	subeq	r5, r5, r2
 80041f4:	6922      	ldr	r2, [r4, #16]
 80041f6:	bf08      	it	eq
 80041f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bfc4      	itt	gt
 8004200:	1a9b      	subgt	r3, r3, r2
 8004202:	18ed      	addgt	r5, r5, r3
 8004204:	341a      	adds	r4, #26
 8004206:	42b5      	cmp	r5, r6
 8004208:	d11a      	bne.n	8004240 <_printf_common+0xcc>
 800420a:	2000      	movs	r0, #0
 800420c:	e008      	b.n	8004220 <_printf_common+0xac>
 800420e:	2301      	movs	r3, #1
 8004210:	4652      	mov	r2, sl
 8004212:	4649      	mov	r1, r9
 8004214:	4638      	mov	r0, r7
 8004216:	47c0      	blx	r8
 8004218:	3001      	adds	r0, #1
 800421a:	d103      	bne.n	8004224 <_printf_common+0xb0>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004224:	3501      	adds	r5, #1
 8004226:	e7c4      	b.n	80041b2 <_printf_common+0x3e>
 8004228:	2030      	movs	r0, #48	; 0x30
 800422a:	18e1      	adds	r1, r4, r3
 800422c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004236:	4422      	add	r2, r4
 8004238:	3302      	adds	r3, #2
 800423a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800423e:	e7c5      	b.n	80041cc <_printf_common+0x58>
 8004240:	2301      	movs	r3, #1
 8004242:	4622      	mov	r2, r4
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d0e6      	beq.n	800421c <_printf_common+0xa8>
 800424e:	3601      	adds	r6, #1
 8004250:	e7d9      	b.n	8004206 <_printf_common+0x92>
	...

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	7e0f      	ldrb	r7, [r1, #24]
 800425a:	4691      	mov	r9, r2
 800425c:	2f78      	cmp	r7, #120	; 0x78
 800425e:	4680      	mov	r8, r0
 8004260:	460c      	mov	r4, r1
 8004262:	469a      	mov	sl, r3
 8004264:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	; 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d9 	beq.w	8004428 <_printf_i+0x1d4>
 8004276:	2f58      	cmp	r7, #88	; 0x58
 8004278:	f000 80a4 	beq.w	80043c4 <_printf_i+0x170>
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a101      	add	r1, pc, #4	; (adr r1, 8004294 <_printf_i+0x40>)
 8004290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	0800440f 	.word	0x0800440f
 80042c4:	08004331 	.word	0x08004331
 80042c8:	080043f1 	.word	0x080043f1
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	08004431 	.word	0x08004431
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	08004331 	.word	0x08004331
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043f9 	.word	0x080043f9
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	602a      	str	r2, [r5, #0]
 80042f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0a4      	b.n	800444a <_printf_i+0x1f6>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	6829      	ldr	r1, [r5, #0]
 8004304:	0606      	lsls	r6, r0, #24
 8004306:	f101 0304 	add.w	r3, r1, #4
 800430a:	d50a      	bpl.n	8004322 <_printf_i+0xce>
 800430c:	680e      	ldr	r6, [r1, #0]
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	2e00      	cmp	r6, #0
 8004312:	da03      	bge.n	800431c <_printf_i+0xc8>
 8004314:	232d      	movs	r3, #45	; 0x2d
 8004316:	4276      	negs	r6, r6
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431c:	230a      	movs	r3, #10
 800431e:	485e      	ldr	r0, [pc, #376]	; (8004498 <_printf_i+0x244>)
 8004320:	e019      	b.n	8004356 <_printf_i+0x102>
 8004322:	680e      	ldr	r6, [r1, #0]
 8004324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	bf18      	it	ne
 800432c:	b236      	sxthne	r6, r6
 800432e:	e7ef      	b.n	8004310 <_printf_i+0xbc>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	6029      	str	r1, [r5, #0]
 8004338:	0601      	lsls	r1, r0, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xec>
 800433c:	681e      	ldr	r6, [r3, #0]
 800433e:	e002      	b.n	8004346 <_printf_i+0xf2>
 8004340:	0646      	lsls	r6, r0, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xe8>
 8004344:	881e      	ldrh	r6, [r3, #0]
 8004346:	2f6f      	cmp	r7, #111	; 0x6f
 8004348:	bf0c      	ite	eq
 800434a:	2308      	moveq	r3, #8
 800434c:	230a      	movne	r3, #10
 800434e:	4852      	ldr	r0, [pc, #328]	; (8004498 <_printf_i+0x244>)
 8004350:	2100      	movs	r1, #0
 8004352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004356:	6865      	ldr	r5, [r4, #4]
 8004358:	2d00      	cmp	r5, #0
 800435a:	bfa8      	it	ge
 800435c:	6821      	ldrge	r1, [r4, #0]
 800435e:	60a5      	str	r5, [r4, #8]
 8004360:	bfa4      	itt	ge
 8004362:	f021 0104 	bicge.w	r1, r1, #4
 8004366:	6021      	strge	r1, [r4, #0]
 8004368:	b90e      	cbnz	r6, 800436e <_printf_i+0x11a>
 800436a:	2d00      	cmp	r5, #0
 800436c:	d04d      	beq.n	800440a <_printf_i+0x1b6>
 800436e:	4615      	mov	r5, r2
 8004370:	fbb6 f1f3 	udiv	r1, r6, r3
 8004374:	fb03 6711 	mls	r7, r3, r1, r6
 8004378:	5dc7      	ldrb	r7, [r0, r7]
 800437a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800437e:	4637      	mov	r7, r6
 8004380:	42bb      	cmp	r3, r7
 8004382:	460e      	mov	r6, r1
 8004384:	d9f4      	bls.n	8004370 <_printf_i+0x11c>
 8004386:	2b08      	cmp	r3, #8
 8004388:	d10b      	bne.n	80043a2 <_printf_i+0x14e>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	07de      	lsls	r6, r3, #31
 800438e:	d508      	bpl.n	80043a2 <_printf_i+0x14e>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	6861      	ldr	r1, [r4, #4]
 8004394:	4299      	cmp	r1, r3
 8004396:	bfde      	ittt	le
 8004398:	2330      	movle	r3, #48	; 0x30
 800439a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800439e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043a2:	1b52      	subs	r2, r2, r5
 80043a4:	6122      	str	r2, [r4, #16]
 80043a6:	464b      	mov	r3, r9
 80043a8:	4621      	mov	r1, r4
 80043aa:	4640      	mov	r0, r8
 80043ac:	f8cd a000 	str.w	sl, [sp]
 80043b0:	aa03      	add	r2, sp, #12
 80043b2:	f7ff fedf 	bl	8004174 <_printf_common>
 80043b6:	3001      	adds	r0, #1
 80043b8:	d14c      	bne.n	8004454 <_printf_i+0x200>
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	b004      	add	sp, #16
 80043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c4:	4834      	ldr	r0, [pc, #208]	; (8004498 <_printf_i+0x244>)
 80043c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043ca:	6829      	ldr	r1, [r5, #0]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80043d2:	6029      	str	r1, [r5, #0]
 80043d4:	061d      	lsls	r5, r3, #24
 80043d6:	d514      	bpl.n	8004402 <_printf_i+0x1ae>
 80043d8:	07df      	lsls	r7, r3, #31
 80043da:	bf44      	itt	mi
 80043dc:	f043 0320 	orrmi.w	r3, r3, #32
 80043e0:	6023      	strmi	r3, [r4, #0]
 80043e2:	b91e      	cbnz	r6, 80043ec <_printf_i+0x198>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	2310      	movs	r3, #16
 80043ee:	e7af      	b.n	8004350 <_printf_i+0xfc>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2378      	movs	r3, #120	; 0x78
 80043fa:	4828      	ldr	r0, [pc, #160]	; (800449c <_printf_i+0x248>)
 80043fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004400:	e7e3      	b.n	80043ca <_printf_i+0x176>
 8004402:	0659      	lsls	r1, r3, #25
 8004404:	bf48      	it	mi
 8004406:	b2b6      	uxthmi	r6, r6
 8004408:	e7e6      	b.n	80043d8 <_printf_i+0x184>
 800440a:	4615      	mov	r5, r2
 800440c:	e7bb      	b.n	8004386 <_printf_i+0x132>
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	6826      	ldr	r6, [r4, #0]
 8004412:	1d18      	adds	r0, r3, #4
 8004414:	6961      	ldr	r1, [r4, #20]
 8004416:	6028      	str	r0, [r5, #0]
 8004418:	0635      	lsls	r5, r6, #24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	d501      	bpl.n	8004422 <_printf_i+0x1ce>
 800441e:	6019      	str	r1, [r3, #0]
 8004420:	e002      	b.n	8004428 <_printf_i+0x1d4>
 8004422:	0670      	lsls	r0, r6, #25
 8004424:	d5fb      	bpl.n	800441e <_printf_i+0x1ca>
 8004426:	8019      	strh	r1, [r3, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	4615      	mov	r5, r2
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	e7ba      	b.n	80043a6 <_printf_i+0x152>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	2100      	movs	r1, #0
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	681d      	ldr	r5, [r3, #0]
 800443a:	6862      	ldr	r2, [r4, #4]
 800443c:	4628      	mov	r0, r5
 800443e:	f001 fa09 	bl	8005854 <memchr>
 8004442:	b108      	cbz	r0, 8004448 <_printf_i+0x1f4>
 8004444:	1b40      	subs	r0, r0, r5
 8004446:	6060      	str	r0, [r4, #4]
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	6123      	str	r3, [r4, #16]
 800444c:	2300      	movs	r3, #0
 800444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004452:	e7a8      	b.n	80043a6 <_printf_i+0x152>
 8004454:	462a      	mov	r2, r5
 8004456:	4649      	mov	r1, r9
 8004458:	4640      	mov	r0, r8
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	47d0      	blx	sl
 800445e:	3001      	adds	r0, #1
 8004460:	d0ab      	beq.n	80043ba <_printf_i+0x166>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	079b      	lsls	r3, r3, #30
 8004466:	d413      	bmi.n	8004490 <_printf_i+0x23c>
 8004468:	68e0      	ldr	r0, [r4, #12]
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	4298      	cmp	r0, r3
 800446e:	bfb8      	it	lt
 8004470:	4618      	movlt	r0, r3
 8004472:	e7a4      	b.n	80043be <_printf_i+0x16a>
 8004474:	2301      	movs	r3, #1
 8004476:	4632      	mov	r2, r6
 8004478:	4649      	mov	r1, r9
 800447a:	4640      	mov	r0, r8
 800447c:	47d0      	blx	sl
 800447e:	3001      	adds	r0, #1
 8004480:	d09b      	beq.n	80043ba <_printf_i+0x166>
 8004482:	3501      	adds	r5, #1
 8004484:	68e3      	ldr	r3, [r4, #12]
 8004486:	9903      	ldr	r1, [sp, #12]
 8004488:	1a5b      	subs	r3, r3, r1
 800448a:	42ab      	cmp	r3, r5
 800448c:	dcf2      	bgt.n	8004474 <_printf_i+0x220>
 800448e:	e7eb      	b.n	8004468 <_printf_i+0x214>
 8004490:	2500      	movs	r5, #0
 8004492:	f104 0619 	add.w	r6, r4, #25
 8004496:	e7f5      	b.n	8004484 <_printf_i+0x230>
 8004498:	08006766 	.word	0x08006766
 800449c:	08006777 	.word	0x08006777

080044a0 <_puts_r>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	460e      	mov	r6, r1
 80044a4:	4605      	mov	r5, r0
 80044a6:	b118      	cbz	r0, 80044b0 <_puts_r+0x10>
 80044a8:	6983      	ldr	r3, [r0, #24]
 80044aa:	b90b      	cbnz	r3, 80044b0 <_puts_r+0x10>
 80044ac:	f001 f8c0 	bl	8005630 <__sinit>
 80044b0:	69ab      	ldr	r3, [r5, #24]
 80044b2:	68ac      	ldr	r4, [r5, #8]
 80044b4:	b913      	cbnz	r3, 80044bc <_puts_r+0x1c>
 80044b6:	4628      	mov	r0, r5
 80044b8:	f001 f8ba 	bl	8005630 <__sinit>
 80044bc:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <_puts_r+0xd0>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	d120      	bne.n	8004504 <_puts_r+0x64>
 80044c2:	686c      	ldr	r4, [r5, #4]
 80044c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c6:	07db      	lsls	r3, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_puts_r+0x36>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	0598      	lsls	r0, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_puts_r+0x36>
 80044d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d2:	f001 f950 	bl	8005776 <__retarget_lock_acquire_recursive>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	0719      	lsls	r1, r3, #28
 80044da:	d51d      	bpl.n	8004518 <_puts_r+0x78>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	b1db      	cbz	r3, 8004518 <_puts_r+0x78>
 80044e0:	3e01      	subs	r6, #1
 80044e2:	68a3      	ldr	r3, [r4, #8]
 80044e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	bb39      	cbnz	r1, 800453e <_puts_r+0x9e>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da38      	bge.n	8004564 <_puts_r+0xc4>
 80044f2:	4622      	mov	r2, r4
 80044f4:	210a      	movs	r1, #10
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f848 	bl	800458c <__swbuf_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d011      	beq.n	8004524 <_puts_r+0x84>
 8004500:	250a      	movs	r5, #10
 8004502:	e011      	b.n	8004528 <_puts_r+0x88>
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <_puts_r+0xd4>)
 8004506:	429c      	cmp	r4, r3
 8004508:	d101      	bne.n	800450e <_puts_r+0x6e>
 800450a:	68ac      	ldr	r4, [r5, #8]
 800450c:	e7da      	b.n	80044c4 <_puts_r+0x24>
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <_puts_r+0xd8>)
 8004510:	429c      	cmp	r4, r3
 8004512:	bf08      	it	eq
 8004514:	68ec      	ldreq	r4, [r5, #12]
 8004516:	e7d5      	b.n	80044c4 <_puts_r+0x24>
 8004518:	4621      	mov	r1, r4
 800451a:	4628      	mov	r0, r5
 800451c:	f000 f888 	bl	8004630 <__swsetup_r>
 8004520:	2800      	cmp	r0, #0
 8004522:	d0dd      	beq.n	80044e0 <_puts_r+0x40>
 8004524:	f04f 35ff 	mov.w	r5, #4294967295
 8004528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452a:	07da      	lsls	r2, r3, #31
 800452c:	d405      	bmi.n	800453a <_puts_r+0x9a>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	059b      	lsls	r3, r3, #22
 8004532:	d402      	bmi.n	800453a <_puts_r+0x9a>
 8004534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004536:	f001 f91f 	bl	8005778 <__retarget_lock_release_recursive>
 800453a:	4628      	mov	r0, r5
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	2b00      	cmp	r3, #0
 8004540:	da04      	bge.n	800454c <_puts_r+0xac>
 8004542:	69a2      	ldr	r2, [r4, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	dc06      	bgt.n	8004556 <_puts_r+0xb6>
 8004548:	290a      	cmp	r1, #10
 800454a:	d004      	beq.n	8004556 <_puts_r+0xb6>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	6022      	str	r2, [r4, #0]
 8004552:	7019      	strb	r1, [r3, #0]
 8004554:	e7c5      	b.n	80044e2 <_puts_r+0x42>
 8004556:	4622      	mov	r2, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 f817 	bl	800458c <__swbuf_r>
 800455e:	3001      	adds	r0, #1
 8004560:	d1bf      	bne.n	80044e2 <_puts_r+0x42>
 8004562:	e7df      	b.n	8004524 <_puts_r+0x84>
 8004564:	250a      	movs	r5, #10
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	6022      	str	r2, [r4, #0]
 800456c:	701d      	strb	r5, [r3, #0]
 800456e:	e7db      	b.n	8004528 <_puts_r+0x88>
 8004570:	08006838 	.word	0x08006838
 8004574:	08006858 	.word	0x08006858
 8004578:	08006818 	.word	0x08006818

0800457c <puts>:
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <puts+0xc>)
 800457e:	4601      	mov	r1, r0
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f7ff bf8d 	b.w	80044a0 <_puts_r>
 8004586:	bf00      	nop
 8004588:	20000650 	.word	0x20000650

0800458c <__swbuf_r>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	4614      	mov	r4, r2
 8004592:	4605      	mov	r5, r0
 8004594:	b118      	cbz	r0, 800459e <__swbuf_r+0x12>
 8004596:	6983      	ldr	r3, [r0, #24]
 8004598:	b90b      	cbnz	r3, 800459e <__swbuf_r+0x12>
 800459a:	f001 f849 	bl	8005630 <__sinit>
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <__swbuf_r+0x98>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d12b      	bne.n	80045fc <__swbuf_r+0x70>
 80045a4:	686c      	ldr	r4, [r5, #4]
 80045a6:	69a3      	ldr	r3, [r4, #24]
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	071a      	lsls	r2, r3, #28
 80045ae:	d52f      	bpl.n	8004610 <__swbuf_r+0x84>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b36b      	cbz	r3, 8004610 <__swbuf_r+0x84>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	b2f6      	uxtb	r6, r6
 80045ba:	1ac0      	subs	r0, r0, r3
 80045bc:	6963      	ldr	r3, [r4, #20]
 80045be:	4637      	mov	r7, r6
 80045c0:	4283      	cmp	r3, r0
 80045c2:	dc04      	bgt.n	80045ce <__swbuf_r+0x42>
 80045c4:	4621      	mov	r1, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 ff9e 	bl	8005508 <_fflush_r>
 80045cc:	bb30      	cbnz	r0, 800461c <__swbuf_r+0x90>
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	3001      	adds	r0, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60a3      	str	r3, [r4, #8]
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6022      	str	r2, [r4, #0]
 80045dc:	701e      	strb	r6, [r3, #0]
 80045de:	6963      	ldr	r3, [r4, #20]
 80045e0:	4283      	cmp	r3, r0
 80045e2:	d004      	beq.n	80045ee <__swbuf_r+0x62>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	07db      	lsls	r3, r3, #31
 80045e8:	d506      	bpl.n	80045f8 <__swbuf_r+0x6c>
 80045ea:	2e0a      	cmp	r6, #10
 80045ec:	d104      	bne.n	80045f8 <__swbuf_r+0x6c>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 ff89 	bl	8005508 <_fflush_r>
 80045f6:	b988      	cbnz	r0, 800461c <__swbuf_r+0x90>
 80045f8:	4638      	mov	r0, r7
 80045fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <__swbuf_r+0x9c>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d101      	bne.n	8004606 <__swbuf_r+0x7a>
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	e7cf      	b.n	80045a6 <__swbuf_r+0x1a>
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <__swbuf_r+0xa0>)
 8004608:	429c      	cmp	r4, r3
 800460a:	bf08      	it	eq
 800460c:	68ec      	ldreq	r4, [r5, #12]
 800460e:	e7ca      	b.n	80045a6 <__swbuf_r+0x1a>
 8004610:	4621      	mov	r1, r4
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f80c 	bl	8004630 <__swsetup_r>
 8004618:	2800      	cmp	r0, #0
 800461a:	d0cb      	beq.n	80045b4 <__swbuf_r+0x28>
 800461c:	f04f 37ff 	mov.w	r7, #4294967295
 8004620:	e7ea      	b.n	80045f8 <__swbuf_r+0x6c>
 8004622:	bf00      	nop
 8004624:	08006838 	.word	0x08006838
 8004628:	08006858 	.word	0x08006858
 800462c:	08006818 	.word	0x08006818

08004630 <__swsetup_r>:
 8004630:	4b32      	ldr	r3, [pc, #200]	; (80046fc <__swsetup_r+0xcc>)
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	681d      	ldr	r5, [r3, #0]
 8004636:	4606      	mov	r6, r0
 8004638:	460c      	mov	r4, r1
 800463a:	b125      	cbz	r5, 8004646 <__swsetup_r+0x16>
 800463c:	69ab      	ldr	r3, [r5, #24]
 800463e:	b913      	cbnz	r3, 8004646 <__swsetup_r+0x16>
 8004640:	4628      	mov	r0, r5
 8004642:	f000 fff5 	bl	8005630 <__sinit>
 8004646:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <__swsetup_r+0xd0>)
 8004648:	429c      	cmp	r4, r3
 800464a:	d10f      	bne.n	800466c <__swsetup_r+0x3c>
 800464c:	686c      	ldr	r4, [r5, #4]
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004654:	0719      	lsls	r1, r3, #28
 8004656:	d42c      	bmi.n	80046b2 <__swsetup_r+0x82>
 8004658:	06dd      	lsls	r5, r3, #27
 800465a:	d411      	bmi.n	8004680 <__swsetup_r+0x50>
 800465c:	2309      	movs	r3, #9
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	e03e      	b.n	80046ea <__swsetup_r+0xba>
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <__swsetup_r+0xd4>)
 800466e:	429c      	cmp	r4, r3
 8004670:	d101      	bne.n	8004676 <__swsetup_r+0x46>
 8004672:	68ac      	ldr	r4, [r5, #8]
 8004674:	e7eb      	b.n	800464e <__swsetup_r+0x1e>
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <__swsetup_r+0xd8>)
 8004678:	429c      	cmp	r4, r3
 800467a:	bf08      	it	eq
 800467c:	68ec      	ldreq	r4, [r5, #12]
 800467e:	e7e6      	b.n	800464e <__swsetup_r+0x1e>
 8004680:	0758      	lsls	r0, r3, #29
 8004682:	d512      	bpl.n	80046aa <__swsetup_r+0x7a>
 8004684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004686:	b141      	cbz	r1, 800469a <__swsetup_r+0x6a>
 8004688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800468c:	4299      	cmp	r1, r3
 800468e:	d002      	beq.n	8004696 <__swsetup_r+0x66>
 8004690:	4630      	mov	r0, r6
 8004692:	f001 fc91 	bl	8005fb8 <_free_r>
 8004696:	2300      	movs	r3, #0
 8004698:	6363      	str	r3, [r4, #52]	; 0x34
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046a0:	81a3      	strh	r3, [r4, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f043 0308 	orr.w	r3, r3, #8
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	b94b      	cbnz	r3, 80046ca <__swsetup_r+0x9a>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c0:	d003      	beq.n	80046ca <__swsetup_r+0x9a>
 80046c2:	4621      	mov	r1, r4
 80046c4:	4630      	mov	r0, r6
 80046c6:	f001 f87d 	bl	80057c4 <__smakebuf_r>
 80046ca:	89a0      	ldrh	r0, [r4, #12]
 80046cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046d0:	f010 0301 	ands.w	r3, r0, #1
 80046d4:	d00a      	beq.n	80046ec <__swsetup_r+0xbc>
 80046d6:	2300      	movs	r3, #0
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	6963      	ldr	r3, [r4, #20]
 80046dc:	425b      	negs	r3, r3
 80046de:	61a3      	str	r3, [r4, #24]
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	b943      	cbnz	r3, 80046f6 <__swsetup_r+0xc6>
 80046e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046e8:	d1ba      	bne.n	8004660 <__swsetup_r+0x30>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	0781      	lsls	r1, r0, #30
 80046ee:	bf58      	it	pl
 80046f0:	6963      	ldrpl	r3, [r4, #20]
 80046f2:	60a3      	str	r3, [r4, #8]
 80046f4:	e7f4      	b.n	80046e0 <__swsetup_r+0xb0>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e7f7      	b.n	80046ea <__swsetup_r+0xba>
 80046fa:	bf00      	nop
 80046fc:	20000650 	.word	0x20000650
 8004700:	08006838 	.word	0x08006838
 8004704:	08006858 	.word	0x08006858
 8004708:	08006818 	.word	0x08006818

0800470c <quorem>:
 800470c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	6903      	ldr	r3, [r0, #16]
 8004712:	690c      	ldr	r4, [r1, #16]
 8004714:	4607      	mov	r7, r0
 8004716:	42a3      	cmp	r3, r4
 8004718:	f2c0 8082 	blt.w	8004820 <quorem+0x114>
 800471c:	3c01      	subs	r4, #1
 800471e:	f100 0514 	add.w	r5, r0, #20
 8004722:	f101 0814 	add.w	r8, r1, #20
 8004726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004734:	3301      	adds	r3, #1
 8004736:	429a      	cmp	r2, r3
 8004738:	fbb2 f6f3 	udiv	r6, r2, r3
 800473c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004744:	d331      	bcc.n	80047aa <quorem+0x9e>
 8004746:	f04f 0e00 	mov.w	lr, #0
 800474a:	4640      	mov	r0, r8
 800474c:	46ac      	mov	ip, r5
 800474e:	46f2      	mov	sl, lr
 8004750:	f850 2b04 	ldr.w	r2, [r0], #4
 8004754:	b293      	uxth	r3, r2
 8004756:	fb06 e303 	mla	r3, r6, r3, lr
 800475a:	0c12      	lsrs	r2, r2, #16
 800475c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004760:	b29b      	uxth	r3, r3
 8004762:	fb06 e202 	mla	r2, r6, r2, lr
 8004766:	ebaa 0303 	sub.w	r3, sl, r3
 800476a:	f8dc a000 	ldr.w	sl, [ip]
 800476e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004772:	fa1f fa8a 	uxth.w	sl, sl
 8004776:	4453      	add	r3, sl
 8004778:	f8dc a000 	ldr.w	sl, [ip]
 800477c:	b292      	uxth	r2, r2
 800477e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800478c:	4581      	cmp	r9, r0
 800478e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004792:	f84c 3b04 	str.w	r3, [ip], #4
 8004796:	d2db      	bcs.n	8004750 <quorem+0x44>
 8004798:	f855 300b 	ldr.w	r3, [r5, fp]
 800479c:	b92b      	cbnz	r3, 80047aa <quorem+0x9e>
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	429d      	cmp	r5, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	d32f      	bcc.n	8004808 <quorem+0xfc>
 80047a8:	613c      	str	r4, [r7, #16]
 80047aa:	4638      	mov	r0, r7
 80047ac:	f001 faec 	bl	8005d88 <__mcmp>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	db25      	blt.n	8004800 <quorem+0xf4>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f04f 0c00 	mov.w	ip, #0
 80047ba:	3601      	adds	r6, #1
 80047bc:	f858 1b04 	ldr.w	r1, [r8], #4
 80047c0:	f8d0 e000 	ldr.w	lr, [r0]
 80047c4:	b28b      	uxth	r3, r1
 80047c6:	ebac 0303 	sub.w	r3, ip, r3
 80047ca:	fa1f f28e 	uxth.w	r2, lr
 80047ce:	4413      	add	r3, r2
 80047d0:	0c0a      	lsrs	r2, r1, #16
 80047d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e0:	45c1      	cmp	r9, r8
 80047e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047e6:	f840 3b04 	str.w	r3, [r0], #4
 80047ea:	d2e7      	bcs.n	80047bc <quorem+0xb0>
 80047ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047f4:	b922      	cbnz	r2, 8004800 <quorem+0xf4>
 80047f6:	3b04      	subs	r3, #4
 80047f8:	429d      	cmp	r5, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	d30a      	bcc.n	8004814 <quorem+0x108>
 80047fe:	613c      	str	r4, [r7, #16]
 8004800:	4630      	mov	r0, r6
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	3b04      	subs	r3, #4
 800480c:	2a00      	cmp	r2, #0
 800480e:	d1cb      	bne.n	80047a8 <quorem+0x9c>
 8004810:	3c01      	subs	r4, #1
 8004812:	e7c6      	b.n	80047a2 <quorem+0x96>
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	3b04      	subs	r3, #4
 8004818:	2a00      	cmp	r2, #0
 800481a:	d1f0      	bne.n	80047fe <quorem+0xf2>
 800481c:	3c01      	subs	r4, #1
 800481e:	e7eb      	b.n	80047f8 <quorem+0xec>
 8004820:	2000      	movs	r0, #0
 8004822:	e7ee      	b.n	8004802 <quorem+0xf6>
 8004824:	0000      	movs	r0, r0
	...

08004828 <_dtoa_r>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	4616      	mov	r6, r2
 800482e:	461f      	mov	r7, r3
 8004830:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004832:	b099      	sub	sp, #100	; 0x64
 8004834:	4605      	mov	r5, r0
 8004836:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800483a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800483e:	b974      	cbnz	r4, 800485e <_dtoa_r+0x36>
 8004840:	2010      	movs	r0, #16
 8004842:	f000 ffff 	bl	8005844 <malloc>
 8004846:	4602      	mov	r2, r0
 8004848:	6268      	str	r0, [r5, #36]	; 0x24
 800484a:	b920      	cbnz	r0, 8004856 <_dtoa_r+0x2e>
 800484c:	21ea      	movs	r1, #234	; 0xea
 800484e:	4ba8      	ldr	r3, [pc, #672]	; (8004af0 <_dtoa_r+0x2c8>)
 8004850:	48a8      	ldr	r0, [pc, #672]	; (8004af4 <_dtoa_r+0x2cc>)
 8004852:	f001 fe4b 	bl	80064ec <__assert_func>
 8004856:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800485a:	6004      	str	r4, [r0, #0]
 800485c:	60c4      	str	r4, [r0, #12]
 800485e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	b151      	cbz	r1, 800487a <_dtoa_r+0x52>
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	2301      	movs	r3, #1
 8004868:	4093      	lsls	r3, r2
 800486a:	604a      	str	r2, [r1, #4]
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	4628      	mov	r0, r5
 8004870:	f001 f84c 	bl	800590c <_Bfree>
 8004874:	2200      	movs	r2, #0
 8004876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	1e3b      	subs	r3, r7, #0
 800487c:	bfaf      	iteee	ge
 800487e:	2300      	movge	r3, #0
 8004880:	2201      	movlt	r2, #1
 8004882:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004886:	9305      	strlt	r3, [sp, #20]
 8004888:	bfa8      	it	ge
 800488a:	f8c8 3000 	strge.w	r3, [r8]
 800488e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004892:	4b99      	ldr	r3, [pc, #612]	; (8004af8 <_dtoa_r+0x2d0>)
 8004894:	bfb8      	it	lt
 8004896:	f8c8 2000 	strlt.w	r2, [r8]
 800489a:	ea33 0309 	bics.w	r3, r3, r9
 800489e:	d119      	bne.n	80048d4 <_dtoa_r+0xac>
 80048a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80048a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048ac:	4333      	orrs	r3, r6
 80048ae:	f000 857f 	beq.w	80053b0 <_dtoa_r+0xb88>
 80048b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048b4:	b953      	cbnz	r3, 80048cc <_dtoa_r+0xa4>
 80048b6:	4b91      	ldr	r3, [pc, #580]	; (8004afc <_dtoa_r+0x2d4>)
 80048b8:	e022      	b.n	8004900 <_dtoa_r+0xd8>
 80048ba:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <_dtoa_r+0x2d8>)
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	3308      	adds	r3, #8
 80048c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	9803      	ldr	r0, [sp, #12]
 80048c6:	b019      	add	sp, #100	; 0x64
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048cc:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <_dtoa_r+0x2d4>)
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	3303      	adds	r3, #3
 80048d2:	e7f5      	b.n	80048c0 <_dtoa_r+0x98>
 80048d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80048dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	f7fc f860 	bl	80009a8 <__aeabi_dcmpeq>
 80048e8:	4680      	mov	r8, r0
 80048ea:	b158      	cbz	r0, 8004904 <_dtoa_r+0xdc>
 80048ec:	2301      	movs	r3, #1
 80048ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8558 	beq.w	80053aa <_dtoa_r+0xb82>
 80048fa:	4882      	ldr	r0, [pc, #520]	; (8004b04 <_dtoa_r+0x2dc>)
 80048fc:	6018      	str	r0, [r3, #0]
 80048fe:	1e43      	subs	r3, r0, #1
 8004900:	9303      	str	r3, [sp, #12]
 8004902:	e7df      	b.n	80048c4 <_dtoa_r+0x9c>
 8004904:	ab16      	add	r3, sp, #88	; 0x58
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	ab17      	add	r3, sp, #92	; 0x5c
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4628      	mov	r0, r5
 800490e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004912:	f001 fae1 	bl	8005ed8 <__d2b>
 8004916:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800491a:	4683      	mov	fp, r0
 800491c:	2c00      	cmp	r4, #0
 800491e:	d07f      	beq.n	8004a20 <_dtoa_r+0x1f8>
 8004920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004926:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800492a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004932:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004936:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800493a:	2200      	movs	r2, #0
 800493c:	4b72      	ldr	r3, [pc, #456]	; (8004b08 <_dtoa_r+0x2e0>)
 800493e:	f7fb fc13 	bl	8000168 <__aeabi_dsub>
 8004942:	a365      	add	r3, pc, #404	; (adr r3, 8004ad8 <_dtoa_r+0x2b0>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f7fb fdc6 	bl	80004d8 <__aeabi_dmul>
 800494c:	a364      	add	r3, pc, #400	; (adr r3, 8004ae0 <_dtoa_r+0x2b8>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fc0b 	bl	800016c <__adddf3>
 8004956:	4606      	mov	r6, r0
 8004958:	4620      	mov	r0, r4
 800495a:	460f      	mov	r7, r1
 800495c:	f7fb fd52 	bl	8000404 <__aeabi_i2d>
 8004960:	a361      	add	r3, pc, #388	; (adr r3, 8004ae8 <_dtoa_r+0x2c0>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f7fb fdb7 	bl	80004d8 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4630      	mov	r0, r6
 8004970:	4639      	mov	r1, r7
 8004972:	f7fb fbfb 	bl	800016c <__adddf3>
 8004976:	4606      	mov	r6, r0
 8004978:	460f      	mov	r7, r1
 800497a:	f7fc f85d 	bl	8000a38 <__aeabi_d2iz>
 800497e:	2200      	movs	r2, #0
 8004980:	4682      	mov	sl, r0
 8004982:	2300      	movs	r3, #0
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fc f818 	bl	80009bc <__aeabi_dcmplt>
 800498c:	b148      	cbz	r0, 80049a2 <_dtoa_r+0x17a>
 800498e:	4650      	mov	r0, sl
 8004990:	f7fb fd38 	bl	8000404 <__aeabi_i2d>
 8004994:	4632      	mov	r2, r6
 8004996:	463b      	mov	r3, r7
 8004998:	f7fc f806 	bl	80009a8 <__aeabi_dcmpeq>
 800499c:	b908      	cbnz	r0, 80049a2 <_dtoa_r+0x17a>
 800499e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a2:	f1ba 0f16 	cmp.w	sl, #22
 80049a6:	d858      	bhi.n	8004a5a <_dtoa_r+0x232>
 80049a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049ac:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <_dtoa_r+0x2e4>)
 80049ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fc f801 	bl	80009bc <__aeabi_dcmplt>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d04f      	beq.n	8004a5e <_dtoa_r+0x236>
 80049be:	2300      	movs	r3, #0
 80049c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049c8:	1b1c      	subs	r4, r3, r4
 80049ca:	1e63      	subs	r3, r4, #1
 80049cc:	9309      	str	r3, [sp, #36]	; 0x24
 80049ce:	bf49      	itett	mi
 80049d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80049d4:	2300      	movpl	r3, #0
 80049d6:	9306      	strmi	r3, [sp, #24]
 80049d8:	2300      	movmi	r3, #0
 80049da:	bf54      	ite	pl
 80049dc:	9306      	strpl	r3, [sp, #24]
 80049de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80049e0:	f1ba 0f00 	cmp.w	sl, #0
 80049e4:	db3d      	blt.n	8004a62 <_dtoa_r+0x23a>
 80049e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80049ec:	4453      	add	r3, sl
 80049ee:	9309      	str	r3, [sp, #36]	; 0x24
 80049f0:	2300      	movs	r3, #0
 80049f2:	930a      	str	r3, [sp, #40]	; 0x28
 80049f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	f200 808c 	bhi.w	8004b14 <_dtoa_r+0x2ec>
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	bfc4      	itt	gt
 8004a00:	3b04      	subgt	r3, #4
 8004a02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a06:	bfc8      	it	gt
 8004a08:	2400      	movgt	r4, #0
 8004a0a:	f1a3 0302 	sub.w	r3, r3, #2
 8004a0e:	bfd8      	it	le
 8004a10:	2401      	movle	r4, #1
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	f200 808a 	bhi.w	8004b2c <_dtoa_r+0x304>
 8004a18:	e8df f003 	tbb	[pc, r3]
 8004a1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a24:	441c      	add	r4, r3
 8004a26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	bfc3      	ittte	gt
 8004a2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a36:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a3a:	f1c3 0320 	rsble	r3, r3, #32
 8004a3e:	bfc6      	itte	gt
 8004a40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a44:	4318      	orrgt	r0, r3
 8004a46:	fa06 f003 	lslle.w	r0, r6, r3
 8004a4a:	f7fb fccb 	bl	80003e4 <__aeabi_ui2d>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a54:	3c01      	subs	r4, #1
 8004a56:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a58:	e76f      	b.n	800493a <_dtoa_r+0x112>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e7b2      	b.n	80049c4 <_dtoa_r+0x19c>
 8004a5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a60:	e7b1      	b.n	80049c6 <_dtoa_r+0x19e>
 8004a62:	9b06      	ldr	r3, [sp, #24]
 8004a64:	eba3 030a 	sub.w	r3, r3, sl
 8004a68:	9306      	str	r3, [sp, #24]
 8004a6a:	f1ca 0300 	rsb	r3, sl, #0
 8004a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a70:	2300      	movs	r3, #0
 8004a72:	930e      	str	r3, [sp, #56]	; 0x38
 8004a74:	e7be      	b.n	80049f4 <_dtoa_r+0x1cc>
 8004a76:	2300      	movs	r3, #0
 8004a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dc58      	bgt.n	8004b32 <_dtoa_r+0x30a>
 8004a80:	f04f 0901 	mov.w	r9, #1
 8004a84:	464b      	mov	r3, r9
 8004a86:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004a8e:	2200      	movs	r2, #0
 8004a90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a92:	6042      	str	r2, [r0, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	f102 0614 	add.w	r6, r2, #20
 8004a9a:	429e      	cmp	r6, r3
 8004a9c:	6841      	ldr	r1, [r0, #4]
 8004a9e:	d94e      	bls.n	8004b3e <_dtoa_r+0x316>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fef3 	bl	800588c <_Balloc>
 8004aa6:	9003      	str	r0, [sp, #12]
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d14c      	bne.n	8004b46 <_dtoa_r+0x31e>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <_dtoa_r+0x2e8>)
 8004ab4:	e6cc      	b.n	8004850 <_dtoa_r+0x28>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e7de      	b.n	8004a78 <_dtoa_r+0x250>
 8004aba:	2300      	movs	r3, #0
 8004abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004abe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ac0:	eb0a 0903 	add.w	r9, sl, r3
 8004ac4:	f109 0301 	add.w	r3, r9, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	9308      	str	r3, [sp, #32]
 8004acc:	bfb8      	it	lt
 8004ace:	2301      	movlt	r3, #1
 8004ad0:	e7dd      	b.n	8004a8e <_dtoa_r+0x266>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e7f2      	b.n	8004abc <_dtoa_r+0x294>
 8004ad6:	bf00      	nop
 8004ad8:	636f4361 	.word	0x636f4361
 8004adc:	3fd287a7 	.word	0x3fd287a7
 8004ae0:	8b60c8b3 	.word	0x8b60c8b3
 8004ae4:	3fc68a28 	.word	0x3fc68a28
 8004ae8:	509f79fb 	.word	0x509f79fb
 8004aec:	3fd34413 	.word	0x3fd34413
 8004af0:	08006795 	.word	0x08006795
 8004af4:	080067ac 	.word	0x080067ac
 8004af8:	7ff00000 	.word	0x7ff00000
 8004afc:	08006791 	.word	0x08006791
 8004b00:	08006788 	.word	0x08006788
 8004b04:	08006765 	.word	0x08006765
 8004b08:	3ff80000 	.word	0x3ff80000
 8004b0c:	08006900 	.word	0x08006900
 8004b10:	08006807 	.word	0x08006807
 8004b14:	2401      	movs	r4, #1
 8004b16:	2300      	movs	r3, #0
 8004b18:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b1a:	9322      	str	r3, [sp, #136]	; 0x88
 8004b1c:	f04f 39ff 	mov.w	r9, #4294967295
 8004b20:	2200      	movs	r2, #0
 8004b22:	2312      	movs	r3, #18
 8004b24:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b28:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b2a:	e7b0      	b.n	8004a8e <_dtoa_r+0x266>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b30:	e7f4      	b.n	8004b1c <_dtoa_r+0x2f4>
 8004b32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b36:	464b      	mov	r3, r9
 8004b38:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b3c:	e7a7      	b.n	8004a8e <_dtoa_r+0x266>
 8004b3e:	3101      	adds	r1, #1
 8004b40:	6041      	str	r1, [r0, #4]
 8004b42:	0052      	lsls	r2, r2, #1
 8004b44:	e7a7      	b.n	8004a96 <_dtoa_r+0x26e>
 8004b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b48:	9a03      	ldr	r2, [sp, #12]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	9b08      	ldr	r3, [sp, #32]
 8004b4e:	2b0e      	cmp	r3, #14
 8004b50:	f200 80a8 	bhi.w	8004ca4 <_dtoa_r+0x47c>
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	f000 80a5 	beq.w	8004ca4 <_dtoa_r+0x47c>
 8004b5a:	f1ba 0f00 	cmp.w	sl, #0
 8004b5e:	dd34      	ble.n	8004bca <_dtoa_r+0x3a2>
 8004b60:	4a9a      	ldr	r2, [pc, #616]	; (8004dcc <_dtoa_r+0x5a4>)
 8004b62:	f00a 030f 	and.w	r3, sl, #15
 8004b66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b76:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004b7a:	d016      	beq.n	8004baa <_dtoa_r+0x382>
 8004b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b80:	4b93      	ldr	r3, [pc, #588]	; (8004dd0 <_dtoa_r+0x5a8>)
 8004b82:	2703      	movs	r7, #3
 8004b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b88:	f7fb fdd0 	bl	800072c <__aeabi_ddiv>
 8004b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b90:	f004 040f 	and.w	r4, r4, #15
 8004b94:	4e8e      	ldr	r6, [pc, #568]	; (8004dd0 <_dtoa_r+0x5a8>)
 8004b96:	b954      	cbnz	r4, 8004bae <_dtoa_r+0x386>
 8004b98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ba0:	f7fb fdc4 	bl	800072c <__aeabi_ddiv>
 8004ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ba8:	e029      	b.n	8004bfe <_dtoa_r+0x3d6>
 8004baa:	2702      	movs	r7, #2
 8004bac:	e7f2      	b.n	8004b94 <_dtoa_r+0x36c>
 8004bae:	07e1      	lsls	r1, r4, #31
 8004bb0:	d508      	bpl.n	8004bc4 <_dtoa_r+0x39c>
 8004bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bba:	f7fb fc8d 	bl	80004d8 <__aeabi_dmul>
 8004bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bc2:	3701      	adds	r7, #1
 8004bc4:	1064      	asrs	r4, r4, #1
 8004bc6:	3608      	adds	r6, #8
 8004bc8:	e7e5      	b.n	8004b96 <_dtoa_r+0x36e>
 8004bca:	f000 80a5 	beq.w	8004d18 <_dtoa_r+0x4f0>
 8004bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bd2:	f1ca 0400 	rsb	r4, sl, #0
 8004bd6:	4b7d      	ldr	r3, [pc, #500]	; (8004dcc <_dtoa_r+0x5a4>)
 8004bd8:	f004 020f 	and.w	r2, r4, #15
 8004bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fc78 	bl	80004d8 <__aeabi_dmul>
 8004be8:	2702      	movs	r7, #2
 8004bea:	2300      	movs	r3, #0
 8004bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bf0:	4e77      	ldr	r6, [pc, #476]	; (8004dd0 <_dtoa_r+0x5a8>)
 8004bf2:	1124      	asrs	r4, r4, #4
 8004bf4:	2c00      	cmp	r4, #0
 8004bf6:	f040 8084 	bne.w	8004d02 <_dtoa_r+0x4da>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d2      	bne.n	8004ba4 <_dtoa_r+0x37c>
 8004bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 808b 	beq.w	8004d1c <_dtoa_r+0x4f4>
 8004c06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c12:	2200      	movs	r2, #0
 8004c14:	4b6f      	ldr	r3, [pc, #444]	; (8004dd4 <_dtoa_r+0x5ac>)
 8004c16:	f7fb fed1 	bl	80009bc <__aeabi_dcmplt>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d07e      	beq.n	8004d1c <_dtoa_r+0x4f4>
 8004c1e:	9b08      	ldr	r3, [sp, #32]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d07b      	beq.n	8004d1c <_dtoa_r+0x4f4>
 8004c24:	f1b9 0f00 	cmp.w	r9, #0
 8004c28:	dd38      	ble.n	8004c9c <_dtoa_r+0x474>
 8004c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4b69      	ldr	r3, [pc, #420]	; (8004dd8 <_dtoa_r+0x5b0>)
 8004c32:	f7fb fc51 	bl	80004d8 <__aeabi_dmul>
 8004c36:	464c      	mov	r4, r9
 8004c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c40:	3701      	adds	r7, #1
 8004c42:	4638      	mov	r0, r7
 8004c44:	f7fb fbde 	bl	8000404 <__aeabi_i2d>
 8004c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4c:	f7fb fc44 	bl	80004d8 <__aeabi_dmul>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <_dtoa_r+0x5b4>)
 8004c54:	f7fb fa8a 	bl	800016c <__adddf3>
 8004c58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c60:	9611      	str	r6, [sp, #68]	; 0x44
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	d15d      	bne.n	8004d22 <_dtoa_r+0x4fa>
 8004c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b5c      	ldr	r3, [pc, #368]	; (8004de0 <_dtoa_r+0x5b8>)
 8004c6e:	f7fb fa7b 	bl	8000168 <__aeabi_dsub>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c7a:	4633      	mov	r3, r6
 8004c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c7e:	f7fb febb 	bl	80009f8 <__aeabi_dcmpgt>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f040 829c 	bne.w	80051c0 <_dtoa_r+0x998>
 8004c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c92:	f7fb fe93 	bl	80009bc <__aeabi_dcmplt>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f040 8290 	bne.w	80051bc <_dtoa_r+0x994>
 8004c9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ca0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f2c0 8152 	blt.w	8004f50 <_dtoa_r+0x728>
 8004cac:	f1ba 0f0e 	cmp.w	sl, #14
 8004cb0:	f300 814e 	bgt.w	8004f50 <_dtoa_r+0x728>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <_dtoa_r+0x5a4>)
 8004cb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f280 80db 	bge.w	8004e80 <_dtoa_r+0x658>
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f300 80d7 	bgt.w	8004e80 <_dtoa_r+0x658>
 8004cd2:	f040 8272 	bne.w	80051ba <_dtoa_r+0x992>
 8004cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <_dtoa_r+0x5b8>)
 8004cde:	f7fb fbfb 	bl	80004d8 <__aeabi_dmul>
 8004ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce6:	f7fb fe7d 	bl	80009e4 <__aeabi_dcmpge>
 8004cea:	9c08      	ldr	r4, [sp, #32]
 8004cec:	4626      	mov	r6, r4
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f040 8248 	bne.w	8005184 <_dtoa_r+0x95c>
 8004cf4:	2331      	movs	r3, #49	; 0x31
 8004cf6:	9f03      	ldr	r7, [sp, #12]
 8004cf8:	f10a 0a01 	add.w	sl, sl, #1
 8004cfc:	f807 3b01 	strb.w	r3, [r7], #1
 8004d00:	e244      	b.n	800518c <_dtoa_r+0x964>
 8004d02:	07e2      	lsls	r2, r4, #31
 8004d04:	d505      	bpl.n	8004d12 <_dtoa_r+0x4ea>
 8004d06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d0a:	f7fb fbe5 	bl	80004d8 <__aeabi_dmul>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	3701      	adds	r7, #1
 8004d12:	1064      	asrs	r4, r4, #1
 8004d14:	3608      	adds	r6, #8
 8004d16:	e76d      	b.n	8004bf4 <_dtoa_r+0x3cc>
 8004d18:	2702      	movs	r7, #2
 8004d1a:	e770      	b.n	8004bfe <_dtoa_r+0x3d6>
 8004d1c:	46d0      	mov	r8, sl
 8004d1e:	9c08      	ldr	r4, [sp, #32]
 8004d20:	e78f      	b.n	8004c42 <_dtoa_r+0x41a>
 8004d22:	9903      	ldr	r1, [sp, #12]
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <_dtoa_r+0x5a4>)
 8004d26:	4421      	add	r1, r4
 8004d28:	9112      	str	r1, [sp, #72]	; 0x48
 8004d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d055      	beq.n	8004de8 <_dtoa_r+0x5c0>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <_dtoa_r+0x5bc>)
 8004d40:	f7fb fcf4 	bl	800072c <__aeabi_ddiv>
 8004d44:	463b      	mov	r3, r7
 8004d46:	4632      	mov	r2, r6
 8004d48:	f7fb fa0e 	bl	8000168 <__aeabi_dsub>
 8004d4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d50:	9f03      	ldr	r7, [sp, #12]
 8004d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d56:	f7fb fe6f 	bl	8000a38 <__aeabi_d2iz>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	f7fb fb52 	bl	8000404 <__aeabi_i2d>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d68:	f7fb f9fe 	bl	8000168 <__aeabi_dsub>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	3430      	adds	r4, #48	; 0x30
 8004d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d7a:	f807 4b01 	strb.w	r4, [r7], #1
 8004d7e:	f7fb fe1d 	bl	80009bc <__aeabi_dcmplt>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d174      	bne.n	8004e70 <_dtoa_r+0x648>
 8004d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	4911      	ldr	r1, [pc, #68]	; (8004dd4 <_dtoa_r+0x5ac>)
 8004d8e:	f7fb f9eb 	bl	8000168 <__aeabi_dsub>
 8004d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d96:	f7fb fe11 	bl	80009bc <__aeabi_dcmplt>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f040 80b7 	bne.w	8004f0e <_dtoa_r+0x6e6>
 8004da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004da2:	429f      	cmp	r7, r3
 8004da4:	f43f af7a 	beq.w	8004c9c <_dtoa_r+0x474>
 8004da8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dac:	2200      	movs	r2, #0
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <_dtoa_r+0x5b0>)
 8004db0:	f7fb fb92 	bl	80004d8 <__aeabi_dmul>
 8004db4:	2200      	movs	r2, #0
 8004db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <_dtoa_r+0x5b0>)
 8004dc0:	f7fb fb8a 	bl	80004d8 <__aeabi_dmul>
 8004dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dc8:	e7c3      	b.n	8004d52 <_dtoa_r+0x52a>
 8004dca:	bf00      	nop
 8004dcc:	08006900 	.word	0x08006900
 8004dd0:	080068d8 	.word	0x080068d8
 8004dd4:	3ff00000 	.word	0x3ff00000
 8004dd8:	40240000 	.word	0x40240000
 8004ddc:	401c0000 	.word	0x401c0000
 8004de0:	40140000 	.word	0x40140000
 8004de4:	3fe00000 	.word	0x3fe00000
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004df2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004df6:	9c03      	ldr	r4, [sp, #12]
 8004df8:	9314      	str	r3, [sp, #80]	; 0x50
 8004dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfe:	f7fb fe1b 	bl	8000a38 <__aeabi_d2iz>
 8004e02:	9015      	str	r0, [sp, #84]	; 0x54
 8004e04:	f7fb fafe 	bl	8000404 <__aeabi_i2d>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e10:	f7fb f9aa 	bl	8000168 <__aeabi_dsub>
 8004e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e16:	4606      	mov	r6, r0
 8004e18:	3330      	adds	r3, #48	; 0x30
 8004e1a:	f804 3b01 	strb.w	r3, [r4], #1
 8004e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e20:	460f      	mov	r7, r1
 8004e22:	429c      	cmp	r4, r3
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	d124      	bne.n	8004e74 <_dtoa_r+0x64c>
 8004e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e2e:	4bb0      	ldr	r3, [pc, #704]	; (80050f0 <_dtoa_r+0x8c8>)
 8004e30:	f7fb f99c 	bl	800016c <__adddf3>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d163      	bne.n	8004f0c <_dtoa_r+0x6e4>
 8004e44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e48:	2000      	movs	r0, #0
 8004e4a:	49a9      	ldr	r1, [pc, #676]	; (80050f0 <_dtoa_r+0x8c8>)
 8004e4c:	f7fb f98c 	bl	8000168 <__aeabi_dsub>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4630      	mov	r0, r6
 8004e56:	4639      	mov	r1, r7
 8004e58:	f7fb fdb0 	bl	80009bc <__aeabi_dcmplt>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	f43f af1d 	beq.w	8004c9c <_dtoa_r+0x474>
 8004e62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e64:	1e7b      	subs	r3, r7, #1
 8004e66:	9314      	str	r3, [sp, #80]	; 0x50
 8004e68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d0f8      	beq.n	8004e62 <_dtoa_r+0x63a>
 8004e70:	46c2      	mov	sl, r8
 8004e72:	e03b      	b.n	8004eec <_dtoa_r+0x6c4>
 8004e74:	4b9f      	ldr	r3, [pc, #636]	; (80050f4 <_dtoa_r+0x8cc>)
 8004e76:	f7fb fb2f 	bl	80004d8 <__aeabi_dmul>
 8004e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e7e:	e7bc      	b.n	8004dfa <_dtoa_r+0x5d2>
 8004e80:	9f03      	ldr	r7, [sp, #12]
 8004e82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb fc4d 	bl	800072c <__aeabi_ddiv>
 8004e92:	f7fb fdd1 	bl	8000a38 <__aeabi_d2iz>
 8004e96:	4604      	mov	r4, r0
 8004e98:	f7fb fab4 	bl	8000404 <__aeabi_i2d>
 8004e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea0:	f7fb fb1a 	bl	80004d8 <__aeabi_dmul>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	4649      	mov	r1, r9
 8004eac:	f7fb f95c 	bl	8000168 <__aeabi_dsub>
 8004eb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004eb4:	f807 6b01 	strb.w	r6, [r7], #1
 8004eb8:	9e03      	ldr	r6, [sp, #12]
 8004eba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ebe:	1bbe      	subs	r6, r7, r6
 8004ec0:	45b4      	cmp	ip, r6
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	d136      	bne.n	8004f36 <_dtoa_r+0x70e>
 8004ec8:	f7fb f950 	bl	800016c <__adddf3>
 8004ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4689      	mov	r9, r1
 8004ed4:	f7fb fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8004ed8:	bb58      	cbnz	r0, 8004f32 <_dtoa_r+0x70a>
 8004eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8004ee6:	b108      	cbz	r0, 8004eec <_dtoa_r+0x6c4>
 8004ee8:	07e1      	lsls	r1, r4, #31
 8004eea:	d422      	bmi.n	8004f32 <_dtoa_r+0x70a>
 8004eec:	4628      	mov	r0, r5
 8004eee:	4659      	mov	r1, fp
 8004ef0:	f000 fd0c 	bl	800590c <_Bfree>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	703b      	strb	r3, [r7, #0]
 8004ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004efa:	f10a 0001 	add.w	r0, sl, #1
 8004efe:	6018      	str	r0, [r3, #0]
 8004f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f43f acde 	beq.w	80048c4 <_dtoa_r+0x9c>
 8004f08:	601f      	str	r7, [r3, #0]
 8004f0a:	e4db      	b.n	80048c4 <_dtoa_r+0x9c>
 8004f0c:	4627      	mov	r7, r4
 8004f0e:	463b      	mov	r3, r7
 8004f10:	461f      	mov	r7, r3
 8004f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f16:	2a39      	cmp	r2, #57	; 0x39
 8004f18:	d107      	bne.n	8004f2a <_dtoa_r+0x702>
 8004f1a:	9a03      	ldr	r2, [sp, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1f7      	bne.n	8004f10 <_dtoa_r+0x6e8>
 8004f20:	2230      	movs	r2, #48	; 0x30
 8004f22:	9903      	ldr	r1, [sp, #12]
 8004f24:	f108 0801 	add.w	r8, r8, #1
 8004f28:	700a      	strb	r2, [r1, #0]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e79e      	b.n	8004e70 <_dtoa_r+0x648>
 8004f32:	46d0      	mov	r8, sl
 8004f34:	e7eb      	b.n	8004f0e <_dtoa_r+0x6e6>
 8004f36:	2200      	movs	r2, #0
 8004f38:	4b6e      	ldr	r3, [pc, #440]	; (80050f4 <_dtoa_r+0x8cc>)
 8004f3a:	f7fb facd 	bl	80004d8 <__aeabi_dmul>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2300      	movs	r3, #0
 8004f42:	4680      	mov	r8, r0
 8004f44:	4689      	mov	r9, r1
 8004f46:	f7fb fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d09b      	beq.n	8004e86 <_dtoa_r+0x65e>
 8004f4e:	e7cd      	b.n	8004eec <_dtoa_r+0x6c4>
 8004f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	f000 80d0 	beq.w	80050f8 <_dtoa_r+0x8d0>
 8004f58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f5a:	2a01      	cmp	r2, #1
 8004f5c:	f300 80ae 	bgt.w	80050bc <_dtoa_r+0x894>
 8004f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	f000 80a6 	beq.w	80050b4 <_dtoa_r+0x88c>
 8004f68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f6e:	9f06      	ldr	r7, [sp, #24]
 8004f70:	9a06      	ldr	r2, [sp, #24]
 8004f72:	2101      	movs	r1, #1
 8004f74:	441a      	add	r2, r3
 8004f76:	9206      	str	r2, [sp, #24]
 8004f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	441a      	add	r2, r3
 8004f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f80:	f000 fd7a 	bl	8005a78 <__i2b>
 8004f84:	4606      	mov	r6, r0
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	dd0c      	ble.n	8004fa4 <_dtoa_r+0x77c>
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd09      	ble.n	8004fa4 <_dtoa_r+0x77c>
 8004f90:	42bb      	cmp	r3, r7
 8004f92:	bfa8      	it	ge
 8004f94:	463b      	movge	r3, r7
 8004f96:	9a06      	ldr	r2, [sp, #24]
 8004f98:	1aff      	subs	r7, r7, r3
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	9206      	str	r2, [sp, #24]
 8004f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa6:	b1f3      	cbz	r3, 8004fe6 <_dtoa_r+0x7be>
 8004fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80a8 	beq.w	8005100 <_dtoa_r+0x8d8>
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	dd10      	ble.n	8004fd6 <_dtoa_r+0x7ae>
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 fe1b 	bl	8005bf4 <__pow5mult>
 8004fbe:	465a      	mov	r2, fp
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 fd6d 	bl	8005aa4 <__multiply>
 8004fca:	4680      	mov	r8, r0
 8004fcc:	4659      	mov	r1, fp
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fc9c 	bl	800590c <_Bfree>
 8004fd4:	46c3      	mov	fp, r8
 8004fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd8:	1b1a      	subs	r2, r3, r4
 8004fda:	d004      	beq.n	8004fe6 <_dtoa_r+0x7be>
 8004fdc:	4659      	mov	r1, fp
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fe08 	bl	8005bf4 <__pow5mult>
 8004fe4:	4683      	mov	fp, r0
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fd45 	bl	8005a78 <__i2b>
 8004fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f340 8086 	ble.w	8005104 <_dtoa_r+0x8dc>
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 fdf9 	bl	8005bf4 <__pow5mult>
 8005002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005004:	4604      	mov	r4, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	dd7f      	ble.n	800510a <_dtoa_r+0x8e2>
 800500a:	f04f 0800 	mov.w	r8, #0
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005014:	6918      	ldr	r0, [r3, #16]
 8005016:	f000 fce1 	bl	80059dc <__hi0bits>
 800501a:	f1c0 0020 	rsb	r0, r0, #32
 800501e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005020:	4418      	add	r0, r3
 8005022:	f010 001f 	ands.w	r0, r0, #31
 8005026:	f000 8092 	beq.w	800514e <_dtoa_r+0x926>
 800502a:	f1c0 0320 	rsb	r3, r0, #32
 800502e:	2b04      	cmp	r3, #4
 8005030:	f340 808a 	ble.w	8005148 <_dtoa_r+0x920>
 8005034:	f1c0 001c 	rsb	r0, r0, #28
 8005038:	9b06      	ldr	r3, [sp, #24]
 800503a:	4407      	add	r7, r0
 800503c:	4403      	add	r3, r0
 800503e:	9306      	str	r3, [sp, #24]
 8005040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005042:	4403      	add	r3, r0
 8005044:	9309      	str	r3, [sp, #36]	; 0x24
 8005046:	9b06      	ldr	r3, [sp, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	dd05      	ble.n	8005058 <_dtoa_r+0x830>
 800504c:	4659      	mov	r1, fp
 800504e:	461a      	mov	r2, r3
 8005050:	4628      	mov	r0, r5
 8005052:	f000 fe29 	bl	8005ca8 <__lshift>
 8005056:	4683      	mov	fp, r0
 8005058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	dd05      	ble.n	800506a <_dtoa_r+0x842>
 800505e:	4621      	mov	r1, r4
 8005060:	461a      	mov	r2, r3
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fe20 	bl	8005ca8 <__lshift>
 8005068:	4604      	mov	r4, r0
 800506a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d070      	beq.n	8005152 <_dtoa_r+0x92a>
 8005070:	4621      	mov	r1, r4
 8005072:	4658      	mov	r0, fp
 8005074:	f000 fe88 	bl	8005d88 <__mcmp>
 8005078:	2800      	cmp	r0, #0
 800507a:	da6a      	bge.n	8005152 <_dtoa_r+0x92a>
 800507c:	2300      	movs	r3, #0
 800507e:	4659      	mov	r1, fp
 8005080:	220a      	movs	r2, #10
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fc64 	bl	8005950 <__multadd>
 8005088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508a:	4683      	mov	fp, r0
 800508c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8194 	beq.w	80053be <_dtoa_r+0xb96>
 8005096:	4631      	mov	r1, r6
 8005098:	2300      	movs	r3, #0
 800509a:	220a      	movs	r2, #10
 800509c:	4628      	mov	r0, r5
 800509e:	f000 fc57 	bl	8005950 <__multadd>
 80050a2:	f1b9 0f00 	cmp.w	r9, #0
 80050a6:	4606      	mov	r6, r0
 80050a8:	f300 8093 	bgt.w	80051d2 <_dtoa_r+0x9aa>
 80050ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	dc57      	bgt.n	8005162 <_dtoa_r+0x93a>
 80050b2:	e08e      	b.n	80051d2 <_dtoa_r+0x9aa>
 80050b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050ba:	e757      	b.n	8004f6c <_dtoa_r+0x744>
 80050bc:	9b08      	ldr	r3, [sp, #32]
 80050be:	1e5c      	subs	r4, r3, #1
 80050c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	bfb7      	itett	lt
 80050c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050c8:	1b1c      	subge	r4, r3, r4
 80050ca:	1ae2      	sublt	r2, r4, r3
 80050cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050ce:	bfbe      	ittt	lt
 80050d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80050d2:	189b      	addlt	r3, r3, r2
 80050d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050d6:	9b08      	ldr	r3, [sp, #32]
 80050d8:	bfb8      	it	lt
 80050da:	2400      	movlt	r4, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfbb      	ittet	lt
 80050e0:	9b06      	ldrlt	r3, [sp, #24]
 80050e2:	9a08      	ldrlt	r2, [sp, #32]
 80050e4:	9f06      	ldrge	r7, [sp, #24]
 80050e6:	1a9f      	sublt	r7, r3, r2
 80050e8:	bfac      	ite	ge
 80050ea:	9b08      	ldrge	r3, [sp, #32]
 80050ec:	2300      	movlt	r3, #0
 80050ee:	e73f      	b.n	8004f70 <_dtoa_r+0x748>
 80050f0:	3fe00000 	.word	0x3fe00000
 80050f4:	40240000 	.word	0x40240000
 80050f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050fa:	9f06      	ldr	r7, [sp, #24]
 80050fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050fe:	e742      	b.n	8004f86 <_dtoa_r+0x75e>
 8005100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005102:	e76b      	b.n	8004fdc <_dtoa_r+0x7b4>
 8005104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005106:	2b01      	cmp	r3, #1
 8005108:	dc19      	bgt.n	800513e <_dtoa_r+0x916>
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	b9bb      	cbnz	r3, 800513e <_dtoa_r+0x916>
 800510e:	9b05      	ldr	r3, [sp, #20]
 8005110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005114:	b99b      	cbnz	r3, 800513e <_dtoa_r+0x916>
 8005116:	9b05      	ldr	r3, [sp, #20]
 8005118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511c:	0d1b      	lsrs	r3, r3, #20
 800511e:	051b      	lsls	r3, r3, #20
 8005120:	b183      	cbz	r3, 8005144 <_dtoa_r+0x91c>
 8005122:	f04f 0801 	mov.w	r8, #1
 8005126:	9b06      	ldr	r3, [sp, #24]
 8005128:	3301      	adds	r3, #1
 800512a:	9306      	str	r3, [sp, #24]
 800512c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512e:	3301      	adds	r3, #1
 8005130:	9309      	str	r3, [sp, #36]	; 0x24
 8005132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	f47f af6a 	bne.w	800500e <_dtoa_r+0x7e6>
 800513a:	2001      	movs	r0, #1
 800513c:	e76f      	b.n	800501e <_dtoa_r+0x7f6>
 800513e:	f04f 0800 	mov.w	r8, #0
 8005142:	e7f6      	b.n	8005132 <_dtoa_r+0x90a>
 8005144:	4698      	mov	r8, r3
 8005146:	e7f4      	b.n	8005132 <_dtoa_r+0x90a>
 8005148:	f43f af7d 	beq.w	8005046 <_dtoa_r+0x81e>
 800514c:	4618      	mov	r0, r3
 800514e:	301c      	adds	r0, #28
 8005150:	e772      	b.n	8005038 <_dtoa_r+0x810>
 8005152:	9b08      	ldr	r3, [sp, #32]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dc36      	bgt.n	80051c6 <_dtoa_r+0x99e>
 8005158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800515a:	2b02      	cmp	r3, #2
 800515c:	dd33      	ble.n	80051c6 <_dtoa_r+0x99e>
 800515e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005162:	f1b9 0f00 	cmp.w	r9, #0
 8005166:	d10d      	bne.n	8005184 <_dtoa_r+0x95c>
 8005168:	4621      	mov	r1, r4
 800516a:	464b      	mov	r3, r9
 800516c:	2205      	movs	r2, #5
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fbee 	bl	8005950 <__multadd>
 8005174:	4601      	mov	r1, r0
 8005176:	4604      	mov	r4, r0
 8005178:	4658      	mov	r0, fp
 800517a:	f000 fe05 	bl	8005d88 <__mcmp>
 800517e:	2800      	cmp	r0, #0
 8005180:	f73f adb8 	bgt.w	8004cf4 <_dtoa_r+0x4cc>
 8005184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005186:	9f03      	ldr	r7, [sp, #12]
 8005188:	ea6f 0a03 	mvn.w	sl, r3
 800518c:	f04f 0800 	mov.w	r8, #0
 8005190:	4621      	mov	r1, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 fbba 	bl	800590c <_Bfree>
 8005198:	2e00      	cmp	r6, #0
 800519a:	f43f aea7 	beq.w	8004eec <_dtoa_r+0x6c4>
 800519e:	f1b8 0f00 	cmp.w	r8, #0
 80051a2:	d005      	beq.n	80051b0 <_dtoa_r+0x988>
 80051a4:	45b0      	cmp	r8, r6
 80051a6:	d003      	beq.n	80051b0 <_dtoa_r+0x988>
 80051a8:	4641      	mov	r1, r8
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fbae 	bl	800590c <_Bfree>
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 fbaa 	bl	800590c <_Bfree>
 80051b8:	e698      	b.n	8004eec <_dtoa_r+0x6c4>
 80051ba:	2400      	movs	r4, #0
 80051bc:	4626      	mov	r6, r4
 80051be:	e7e1      	b.n	8005184 <_dtoa_r+0x95c>
 80051c0:	46c2      	mov	sl, r8
 80051c2:	4626      	mov	r6, r4
 80051c4:	e596      	b.n	8004cf4 <_dtoa_r+0x4cc>
 80051c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80fd 	beq.w	80053cc <_dtoa_r+0xba4>
 80051d2:	2f00      	cmp	r7, #0
 80051d4:	dd05      	ble.n	80051e2 <_dtoa_r+0x9ba>
 80051d6:	4631      	mov	r1, r6
 80051d8:	463a      	mov	r2, r7
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 fd64 	bl	8005ca8 <__lshift>
 80051e0:	4606      	mov	r6, r0
 80051e2:	f1b8 0f00 	cmp.w	r8, #0
 80051e6:	d05c      	beq.n	80052a2 <_dtoa_r+0xa7a>
 80051e8:	4628      	mov	r0, r5
 80051ea:	6871      	ldr	r1, [r6, #4]
 80051ec:	f000 fb4e 	bl	800588c <_Balloc>
 80051f0:	4607      	mov	r7, r0
 80051f2:	b928      	cbnz	r0, 8005200 <_dtoa_r+0x9d8>
 80051f4:	4602      	mov	r2, r0
 80051f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051fa:	4b7f      	ldr	r3, [pc, #508]	; (80053f8 <_dtoa_r+0xbd0>)
 80051fc:	f7ff bb28 	b.w	8004850 <_dtoa_r+0x28>
 8005200:	6932      	ldr	r2, [r6, #16]
 8005202:	f106 010c 	add.w	r1, r6, #12
 8005206:	3202      	adds	r2, #2
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	300c      	adds	r0, #12
 800520c:	f000 fb30 	bl	8005870 <memcpy>
 8005210:	2201      	movs	r2, #1
 8005212:	4639      	mov	r1, r7
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fd47 	bl	8005ca8 <__lshift>
 800521a:	46b0      	mov	r8, r6
 800521c:	4606      	mov	r6, r0
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	9308      	str	r3, [sp, #32]
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	444b      	add	r3, r9
 8005228:	930a      	str	r3, [sp, #40]	; 0x28
 800522a:	9b04      	ldr	r3, [sp, #16]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	9b08      	ldr	r3, [sp, #32]
 8005234:	4621      	mov	r1, r4
 8005236:	3b01      	subs	r3, #1
 8005238:	4658      	mov	r0, fp
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	f7ff fa66 	bl	800470c <quorem>
 8005240:	4603      	mov	r3, r0
 8005242:	4641      	mov	r1, r8
 8005244:	3330      	adds	r3, #48	; 0x30
 8005246:	9006      	str	r0, [sp, #24]
 8005248:	4658      	mov	r0, fp
 800524a:	930b      	str	r3, [sp, #44]	; 0x2c
 800524c:	f000 fd9c 	bl	8005d88 <__mcmp>
 8005250:	4632      	mov	r2, r6
 8005252:	4681      	mov	r9, r0
 8005254:	4621      	mov	r1, r4
 8005256:	4628      	mov	r0, r5
 8005258:	f000 fdb2 	bl	8005dc0 <__mdiff>
 800525c:	68c2      	ldr	r2, [r0, #12]
 800525e:	4607      	mov	r7, r0
 8005260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005262:	bb02      	cbnz	r2, 80052a6 <_dtoa_r+0xa7e>
 8005264:	4601      	mov	r1, r0
 8005266:	4658      	mov	r0, fp
 8005268:	f000 fd8e 	bl	8005d88 <__mcmp>
 800526c:	4602      	mov	r2, r0
 800526e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005270:	4639      	mov	r1, r7
 8005272:	4628      	mov	r0, r5
 8005274:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005278:	f000 fb48 	bl	800590c <_Bfree>
 800527c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800527e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005280:	9f08      	ldr	r7, [sp, #32]
 8005282:	ea43 0102 	orr.w	r1, r3, r2
 8005286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005288:	430b      	orrs	r3, r1
 800528a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800528c:	d10d      	bne.n	80052aa <_dtoa_r+0xa82>
 800528e:	2b39      	cmp	r3, #57	; 0x39
 8005290:	d029      	beq.n	80052e6 <_dtoa_r+0xabe>
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	dd01      	ble.n	800529c <_dtoa_r+0xa74>
 8005298:	9b06      	ldr	r3, [sp, #24]
 800529a:	3331      	adds	r3, #49	; 0x31
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	7013      	strb	r3, [r2, #0]
 80052a0:	e776      	b.n	8005190 <_dtoa_r+0x968>
 80052a2:	4630      	mov	r0, r6
 80052a4:	e7b9      	b.n	800521a <_dtoa_r+0x9f2>
 80052a6:	2201      	movs	r2, #1
 80052a8:	e7e2      	b.n	8005270 <_dtoa_r+0xa48>
 80052aa:	f1b9 0f00 	cmp.w	r9, #0
 80052ae:	db06      	blt.n	80052be <_dtoa_r+0xa96>
 80052b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80052b2:	ea41 0909 	orr.w	r9, r1, r9
 80052b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052b8:	ea59 0101 	orrs.w	r1, r9, r1
 80052bc:	d120      	bne.n	8005300 <_dtoa_r+0xad8>
 80052be:	2a00      	cmp	r2, #0
 80052c0:	ddec      	ble.n	800529c <_dtoa_r+0xa74>
 80052c2:	4659      	mov	r1, fp
 80052c4:	2201      	movs	r2, #1
 80052c6:	4628      	mov	r0, r5
 80052c8:	9308      	str	r3, [sp, #32]
 80052ca:	f000 fced 	bl	8005ca8 <__lshift>
 80052ce:	4621      	mov	r1, r4
 80052d0:	4683      	mov	fp, r0
 80052d2:	f000 fd59 	bl	8005d88 <__mcmp>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	9b08      	ldr	r3, [sp, #32]
 80052da:	dc02      	bgt.n	80052e2 <_dtoa_r+0xaba>
 80052dc:	d1de      	bne.n	800529c <_dtoa_r+0xa74>
 80052de:	07da      	lsls	r2, r3, #31
 80052e0:	d5dc      	bpl.n	800529c <_dtoa_r+0xa74>
 80052e2:	2b39      	cmp	r3, #57	; 0x39
 80052e4:	d1d8      	bne.n	8005298 <_dtoa_r+0xa70>
 80052e6:	2339      	movs	r3, #57	; 0x39
 80052e8:	9a04      	ldr	r2, [sp, #16]
 80052ea:	7013      	strb	r3, [r2, #0]
 80052ec:	463b      	mov	r3, r7
 80052ee:	461f      	mov	r7, r3
 80052f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	2a39      	cmp	r2, #57	; 0x39
 80052f8:	d050      	beq.n	800539c <_dtoa_r+0xb74>
 80052fa:	3201      	adds	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e747      	b.n	8005190 <_dtoa_r+0x968>
 8005300:	2a00      	cmp	r2, #0
 8005302:	dd03      	ble.n	800530c <_dtoa_r+0xae4>
 8005304:	2b39      	cmp	r3, #57	; 0x39
 8005306:	d0ee      	beq.n	80052e6 <_dtoa_r+0xabe>
 8005308:	3301      	adds	r3, #1
 800530a:	e7c7      	b.n	800529c <_dtoa_r+0xa74>
 800530c:	9a08      	ldr	r2, [sp, #32]
 800530e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005310:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005314:	428a      	cmp	r2, r1
 8005316:	d02a      	beq.n	800536e <_dtoa_r+0xb46>
 8005318:	4659      	mov	r1, fp
 800531a:	2300      	movs	r3, #0
 800531c:	220a      	movs	r2, #10
 800531e:	4628      	mov	r0, r5
 8005320:	f000 fb16 	bl	8005950 <__multadd>
 8005324:	45b0      	cmp	r8, r6
 8005326:	4683      	mov	fp, r0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	f04f 020a 	mov.w	r2, #10
 8005330:	4641      	mov	r1, r8
 8005332:	4628      	mov	r0, r5
 8005334:	d107      	bne.n	8005346 <_dtoa_r+0xb1e>
 8005336:	f000 fb0b 	bl	8005950 <__multadd>
 800533a:	4680      	mov	r8, r0
 800533c:	4606      	mov	r6, r0
 800533e:	9b08      	ldr	r3, [sp, #32]
 8005340:	3301      	adds	r3, #1
 8005342:	9308      	str	r3, [sp, #32]
 8005344:	e775      	b.n	8005232 <_dtoa_r+0xa0a>
 8005346:	f000 fb03 	bl	8005950 <__multadd>
 800534a:	4631      	mov	r1, r6
 800534c:	4680      	mov	r8, r0
 800534e:	2300      	movs	r3, #0
 8005350:	220a      	movs	r2, #10
 8005352:	4628      	mov	r0, r5
 8005354:	f000 fafc 	bl	8005950 <__multadd>
 8005358:	4606      	mov	r6, r0
 800535a:	e7f0      	b.n	800533e <_dtoa_r+0xb16>
 800535c:	f1b9 0f00 	cmp.w	r9, #0
 8005360:	bfcc      	ite	gt
 8005362:	464f      	movgt	r7, r9
 8005364:	2701      	movle	r7, #1
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	9a03      	ldr	r2, [sp, #12]
 800536c:	4417      	add	r7, r2
 800536e:	4659      	mov	r1, fp
 8005370:	2201      	movs	r2, #1
 8005372:	4628      	mov	r0, r5
 8005374:	9308      	str	r3, [sp, #32]
 8005376:	f000 fc97 	bl	8005ca8 <__lshift>
 800537a:	4621      	mov	r1, r4
 800537c:	4683      	mov	fp, r0
 800537e:	f000 fd03 	bl	8005d88 <__mcmp>
 8005382:	2800      	cmp	r0, #0
 8005384:	dcb2      	bgt.n	80052ec <_dtoa_r+0xac4>
 8005386:	d102      	bne.n	800538e <_dtoa_r+0xb66>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d4ae      	bmi.n	80052ec <_dtoa_r+0xac4>
 800538e:	463b      	mov	r3, r7
 8005390:	461f      	mov	r7, r3
 8005392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005396:	2a30      	cmp	r2, #48	; 0x30
 8005398:	d0fa      	beq.n	8005390 <_dtoa_r+0xb68>
 800539a:	e6f9      	b.n	8005190 <_dtoa_r+0x968>
 800539c:	9a03      	ldr	r2, [sp, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1a5      	bne.n	80052ee <_dtoa_r+0xac6>
 80053a2:	2331      	movs	r3, #49	; 0x31
 80053a4:	f10a 0a01 	add.w	sl, sl, #1
 80053a8:	e779      	b.n	800529e <_dtoa_r+0xa76>
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <_dtoa_r+0xbd4>)
 80053ac:	f7ff baa8 	b.w	8004900 <_dtoa_r+0xd8>
 80053b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f47f aa81 	bne.w	80048ba <_dtoa_r+0x92>
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <_dtoa_r+0xbd8>)
 80053ba:	f7ff baa1 	b.w	8004900 <_dtoa_r+0xd8>
 80053be:	f1b9 0f00 	cmp.w	r9, #0
 80053c2:	dc03      	bgt.n	80053cc <_dtoa_r+0xba4>
 80053c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	f73f aecb 	bgt.w	8005162 <_dtoa_r+0x93a>
 80053cc:	9f03      	ldr	r7, [sp, #12]
 80053ce:	4621      	mov	r1, r4
 80053d0:	4658      	mov	r0, fp
 80053d2:	f7ff f99b 	bl	800470c <quorem>
 80053d6:	9a03      	ldr	r2, [sp, #12]
 80053d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053dc:	f807 3b01 	strb.w	r3, [r7], #1
 80053e0:	1aba      	subs	r2, r7, r2
 80053e2:	4591      	cmp	r9, r2
 80053e4:	ddba      	ble.n	800535c <_dtoa_r+0xb34>
 80053e6:	4659      	mov	r1, fp
 80053e8:	2300      	movs	r3, #0
 80053ea:	220a      	movs	r2, #10
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 faaf 	bl	8005950 <__multadd>
 80053f2:	4683      	mov	fp, r0
 80053f4:	e7eb      	b.n	80053ce <_dtoa_r+0xba6>
 80053f6:	bf00      	nop
 80053f8:	08006807 	.word	0x08006807
 80053fc:	08006764 	.word	0x08006764
 8005400:	08006788 	.word	0x08006788

08005404 <__sflush_r>:
 8005404:	898a      	ldrh	r2, [r1, #12]
 8005406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005408:	4605      	mov	r5, r0
 800540a:	0710      	lsls	r0, r2, #28
 800540c:	460c      	mov	r4, r1
 800540e:	d457      	bmi.n	80054c0 <__sflush_r+0xbc>
 8005410:	684b      	ldr	r3, [r1, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dc04      	bgt.n	8005420 <__sflush_r+0x1c>
 8005416:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	dc01      	bgt.n	8005420 <__sflush_r+0x1c>
 800541c:	2000      	movs	r0, #0
 800541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005422:	2e00      	cmp	r6, #0
 8005424:	d0fa      	beq.n	800541c <__sflush_r+0x18>
 8005426:	2300      	movs	r3, #0
 8005428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800542c:	682f      	ldr	r7, [r5, #0]
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	d032      	beq.n	8005498 <__sflush_r+0x94>
 8005432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	075a      	lsls	r2, r3, #29
 8005438:	d505      	bpl.n	8005446 <__sflush_r+0x42>
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	1ac0      	subs	r0, r0, r3
 800543e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005440:	b10b      	cbz	r3, 8005446 <__sflush_r+0x42>
 8005442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005444:	1ac0      	subs	r0, r0, r3
 8005446:	2300      	movs	r3, #0
 8005448:	4602      	mov	r2, r0
 800544a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800544c:	4628      	mov	r0, r5
 800544e:	6a21      	ldr	r1, [r4, #32]
 8005450:	47b0      	blx	r6
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	d106      	bne.n	8005466 <__sflush_r+0x62>
 8005458:	6829      	ldr	r1, [r5, #0]
 800545a:	291d      	cmp	r1, #29
 800545c:	d82c      	bhi.n	80054b8 <__sflush_r+0xb4>
 800545e:	4a29      	ldr	r2, [pc, #164]	; (8005504 <__sflush_r+0x100>)
 8005460:	40ca      	lsrs	r2, r1
 8005462:	07d6      	lsls	r6, r2, #31
 8005464:	d528      	bpl.n	80054b8 <__sflush_r+0xb4>
 8005466:	2200      	movs	r2, #0
 8005468:	6062      	str	r2, [r4, #4]
 800546a:	6922      	ldr	r2, [r4, #16]
 800546c:	04d9      	lsls	r1, r3, #19
 800546e:	6022      	str	r2, [r4, #0]
 8005470:	d504      	bpl.n	800547c <__sflush_r+0x78>
 8005472:	1c42      	adds	r2, r0, #1
 8005474:	d101      	bne.n	800547a <__sflush_r+0x76>
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	b903      	cbnz	r3, 800547c <__sflush_r+0x78>
 800547a:	6560      	str	r0, [r4, #84]	; 0x54
 800547c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547e:	602f      	str	r7, [r5, #0]
 8005480:	2900      	cmp	r1, #0
 8005482:	d0cb      	beq.n	800541c <__sflush_r+0x18>
 8005484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005488:	4299      	cmp	r1, r3
 800548a:	d002      	beq.n	8005492 <__sflush_r+0x8e>
 800548c:	4628      	mov	r0, r5
 800548e:	f000 fd93 	bl	8005fb8 <_free_r>
 8005492:	2000      	movs	r0, #0
 8005494:	6360      	str	r0, [r4, #52]	; 0x34
 8005496:	e7c2      	b.n	800541e <__sflush_r+0x1a>
 8005498:	6a21      	ldr	r1, [r4, #32]
 800549a:	2301      	movs	r3, #1
 800549c:	4628      	mov	r0, r5
 800549e:	47b0      	blx	r6
 80054a0:	1c41      	adds	r1, r0, #1
 80054a2:	d1c7      	bne.n	8005434 <__sflush_r+0x30>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0c4      	beq.n	8005434 <__sflush_r+0x30>
 80054aa:	2b1d      	cmp	r3, #29
 80054ac:	d001      	beq.n	80054b2 <__sflush_r+0xae>
 80054ae:	2b16      	cmp	r3, #22
 80054b0:	d101      	bne.n	80054b6 <__sflush_r+0xb2>
 80054b2:	602f      	str	r7, [r5, #0]
 80054b4:	e7b2      	b.n	800541c <__sflush_r+0x18>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	e7ae      	b.n	800541e <__sflush_r+0x1a>
 80054c0:	690f      	ldr	r7, [r1, #16]
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	d0aa      	beq.n	800541c <__sflush_r+0x18>
 80054c6:	0793      	lsls	r3, r2, #30
 80054c8:	bf18      	it	ne
 80054ca:	2300      	movne	r3, #0
 80054cc:	680e      	ldr	r6, [r1, #0]
 80054ce:	bf08      	it	eq
 80054d0:	694b      	ldreq	r3, [r1, #20]
 80054d2:	1bf6      	subs	r6, r6, r7
 80054d4:	600f      	str	r7, [r1, #0]
 80054d6:	608b      	str	r3, [r1, #8]
 80054d8:	2e00      	cmp	r6, #0
 80054da:	dd9f      	ble.n	800541c <__sflush_r+0x18>
 80054dc:	4633      	mov	r3, r6
 80054de:	463a      	mov	r2, r7
 80054e0:	4628      	mov	r0, r5
 80054e2:	6a21      	ldr	r1, [r4, #32]
 80054e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80054e8:	47e0      	blx	ip
 80054ea:	2800      	cmp	r0, #0
 80054ec:	dc06      	bgt.n	80054fc <__sflush_r+0xf8>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	e790      	b.n	800541e <__sflush_r+0x1a>
 80054fc:	4407      	add	r7, r0
 80054fe:	1a36      	subs	r6, r6, r0
 8005500:	e7ea      	b.n	80054d8 <__sflush_r+0xd4>
 8005502:	bf00      	nop
 8005504:	20400001 	.word	0x20400001

08005508 <_fflush_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	690b      	ldr	r3, [r1, #16]
 800550c:	4605      	mov	r5, r0
 800550e:	460c      	mov	r4, r1
 8005510:	b913      	cbnz	r3, 8005518 <_fflush_r+0x10>
 8005512:	2500      	movs	r5, #0
 8005514:	4628      	mov	r0, r5
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	b118      	cbz	r0, 8005522 <_fflush_r+0x1a>
 800551a:	6983      	ldr	r3, [r0, #24]
 800551c:	b90b      	cbnz	r3, 8005522 <_fflush_r+0x1a>
 800551e:	f000 f887 	bl	8005630 <__sinit>
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <_fflush_r+0x6c>)
 8005524:	429c      	cmp	r4, r3
 8005526:	d11b      	bne.n	8005560 <_fflush_r+0x58>
 8005528:	686c      	ldr	r4, [r5, #4]
 800552a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ef      	beq.n	8005512 <_fflush_r+0xa>
 8005532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	d404      	bmi.n	8005542 <_fflush_r+0x3a>
 8005538:	0599      	lsls	r1, r3, #22
 800553a:	d402      	bmi.n	8005542 <_fflush_r+0x3a>
 800553c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800553e:	f000 f91a 	bl	8005776 <__retarget_lock_acquire_recursive>
 8005542:	4628      	mov	r0, r5
 8005544:	4621      	mov	r1, r4
 8005546:	f7ff ff5d 	bl	8005404 <__sflush_r>
 800554a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800554c:	4605      	mov	r5, r0
 800554e:	07da      	lsls	r2, r3, #31
 8005550:	d4e0      	bmi.n	8005514 <_fflush_r+0xc>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	059b      	lsls	r3, r3, #22
 8005556:	d4dd      	bmi.n	8005514 <_fflush_r+0xc>
 8005558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555a:	f000 f90d 	bl	8005778 <__retarget_lock_release_recursive>
 800555e:	e7d9      	b.n	8005514 <_fflush_r+0xc>
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <_fflush_r+0x70>)
 8005562:	429c      	cmp	r4, r3
 8005564:	d101      	bne.n	800556a <_fflush_r+0x62>
 8005566:	68ac      	ldr	r4, [r5, #8]
 8005568:	e7df      	b.n	800552a <_fflush_r+0x22>
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <_fflush_r+0x74>)
 800556c:	429c      	cmp	r4, r3
 800556e:	bf08      	it	eq
 8005570:	68ec      	ldreq	r4, [r5, #12]
 8005572:	e7da      	b.n	800552a <_fflush_r+0x22>
 8005574:	08006838 	.word	0x08006838
 8005578:	08006858 	.word	0x08006858
 800557c:	08006818 	.word	0x08006818

08005580 <std>:
 8005580:	2300      	movs	r3, #0
 8005582:	b510      	push	{r4, lr}
 8005584:	4604      	mov	r4, r0
 8005586:	e9c0 3300 	strd	r3, r3, [r0]
 800558a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800558e:	6083      	str	r3, [r0, #8]
 8005590:	8181      	strh	r1, [r0, #12]
 8005592:	6643      	str	r3, [r0, #100]	; 0x64
 8005594:	81c2      	strh	r2, [r0, #14]
 8005596:	6183      	str	r3, [r0, #24]
 8005598:	4619      	mov	r1, r3
 800559a:	2208      	movs	r2, #8
 800559c:	305c      	adds	r0, #92	; 0x5c
 800559e:	f7fe fb17 	bl	8003bd0 <memset>
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <std+0x38>)
 80055a4:	6224      	str	r4, [r4, #32]
 80055a6:	6263      	str	r3, [r4, #36]	; 0x24
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <std+0x3c>)
 80055aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <std+0x40>)
 80055ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <std+0x44>)
 80055b2:	6323      	str	r3, [r4, #48]	; 0x30
 80055b4:	bd10      	pop	{r4, pc}
 80055b6:	bf00      	nop
 80055b8:	08006441 	.word	0x08006441
 80055bc:	08006463 	.word	0x08006463
 80055c0:	0800649b 	.word	0x0800649b
 80055c4:	080064bf 	.word	0x080064bf

080055c8 <_cleanup_r>:
 80055c8:	4901      	ldr	r1, [pc, #4]	; (80055d0 <_cleanup_r+0x8>)
 80055ca:	f000 b8af 	b.w	800572c <_fwalk_reent>
 80055ce:	bf00      	nop
 80055d0:	08005509 	.word	0x08005509

080055d4 <__sfmoreglue>:
 80055d4:	2268      	movs	r2, #104	; 0x68
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	1e4d      	subs	r5, r1, #1
 80055da:	4355      	muls	r5, r2
 80055dc:	460e      	mov	r6, r1
 80055de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055e2:	f000 fd51 	bl	8006088 <_malloc_r>
 80055e6:	4604      	mov	r4, r0
 80055e8:	b140      	cbz	r0, 80055fc <__sfmoreglue+0x28>
 80055ea:	2100      	movs	r1, #0
 80055ec:	e9c0 1600 	strd	r1, r6, [r0]
 80055f0:	300c      	adds	r0, #12
 80055f2:	60a0      	str	r0, [r4, #8]
 80055f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055f8:	f7fe faea 	bl	8003bd0 <memset>
 80055fc:	4620      	mov	r0, r4
 80055fe:	bd70      	pop	{r4, r5, r6, pc}

08005600 <__sfp_lock_acquire>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__sfp_lock_acquire+0x8>)
 8005602:	f000 b8b8 	b.w	8005776 <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	2000098d 	.word	0x2000098d

0800560c <__sfp_lock_release>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__sfp_lock_release+0x8>)
 800560e:	f000 b8b3 	b.w	8005778 <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	2000098d 	.word	0x2000098d

08005618 <__sinit_lock_acquire>:
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <__sinit_lock_acquire+0x8>)
 800561a:	f000 b8ac 	b.w	8005776 <__retarget_lock_acquire_recursive>
 800561e:	bf00      	nop
 8005620:	2000098e 	.word	0x2000098e

08005624 <__sinit_lock_release>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__sinit_lock_release+0x8>)
 8005626:	f000 b8a7 	b.w	8005778 <__retarget_lock_release_recursive>
 800562a:	bf00      	nop
 800562c:	2000098e 	.word	0x2000098e

08005630 <__sinit>:
 8005630:	b510      	push	{r4, lr}
 8005632:	4604      	mov	r4, r0
 8005634:	f7ff fff0 	bl	8005618 <__sinit_lock_acquire>
 8005638:	69a3      	ldr	r3, [r4, #24]
 800563a:	b11b      	cbz	r3, 8005644 <__sinit+0x14>
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	f7ff bff0 	b.w	8005624 <__sinit_lock_release>
 8005644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005648:	6523      	str	r3, [r4, #80]	; 0x50
 800564a:	4b13      	ldr	r3, [pc, #76]	; (8005698 <__sinit+0x68>)
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <__sinit+0x6c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	62a2      	str	r2, [r4, #40]	; 0x28
 8005652:	42a3      	cmp	r3, r4
 8005654:	bf08      	it	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	4620      	mov	r0, r4
 800565a:	bf08      	it	eq
 800565c:	61a3      	streq	r3, [r4, #24]
 800565e:	f000 f81f 	bl	80056a0 <__sfp>
 8005662:	6060      	str	r0, [r4, #4]
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f81b 	bl	80056a0 <__sfp>
 800566a:	60a0      	str	r0, [r4, #8]
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f817 	bl	80056a0 <__sfp>
 8005672:	2200      	movs	r2, #0
 8005674:	2104      	movs	r1, #4
 8005676:	60e0      	str	r0, [r4, #12]
 8005678:	6860      	ldr	r0, [r4, #4]
 800567a:	f7ff ff81 	bl	8005580 <std>
 800567e:	2201      	movs	r2, #1
 8005680:	2109      	movs	r1, #9
 8005682:	68a0      	ldr	r0, [r4, #8]
 8005684:	f7ff ff7c 	bl	8005580 <std>
 8005688:	2202      	movs	r2, #2
 800568a:	2112      	movs	r1, #18
 800568c:	68e0      	ldr	r0, [r4, #12]
 800568e:	f7ff ff77 	bl	8005580 <std>
 8005692:	2301      	movs	r3, #1
 8005694:	61a3      	str	r3, [r4, #24]
 8005696:	e7d1      	b.n	800563c <__sinit+0xc>
 8005698:	08006750 	.word	0x08006750
 800569c:	080055c9 	.word	0x080055c9

080056a0 <__sfp>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	4607      	mov	r7, r0
 80056a4:	f7ff ffac 	bl	8005600 <__sfp_lock_acquire>
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <__sfp+0x84>)
 80056aa:	681e      	ldr	r6, [r3, #0]
 80056ac:	69b3      	ldr	r3, [r6, #24]
 80056ae:	b913      	cbnz	r3, 80056b6 <__sfp+0x16>
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff ffbd 	bl	8005630 <__sinit>
 80056b6:	3648      	adds	r6, #72	; 0x48
 80056b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	d503      	bpl.n	80056c8 <__sfp+0x28>
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	b30b      	cbz	r3, 8005708 <__sfp+0x68>
 80056c4:	6836      	ldr	r6, [r6, #0]
 80056c6:	e7f7      	b.n	80056b8 <__sfp+0x18>
 80056c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056cc:	b9d5      	cbnz	r5, 8005704 <__sfp+0x64>
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <__sfp+0x88>)
 80056d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d4:	60e3      	str	r3, [r4, #12]
 80056d6:	6665      	str	r5, [r4, #100]	; 0x64
 80056d8:	f000 f84c 	bl	8005774 <__retarget_lock_init_recursive>
 80056dc:	f7ff ff96 	bl	800560c <__sfp_lock_release>
 80056e0:	2208      	movs	r2, #8
 80056e2:	4629      	mov	r1, r5
 80056e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056ec:	6025      	str	r5, [r4, #0]
 80056ee:	61a5      	str	r5, [r4, #24]
 80056f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056f4:	f7fe fa6c 	bl	8003bd0 <memset>
 80056f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005700:	4620      	mov	r0, r4
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	3468      	adds	r4, #104	; 0x68
 8005706:	e7d9      	b.n	80056bc <__sfp+0x1c>
 8005708:	2104      	movs	r1, #4
 800570a:	4638      	mov	r0, r7
 800570c:	f7ff ff62 	bl	80055d4 <__sfmoreglue>
 8005710:	4604      	mov	r4, r0
 8005712:	6030      	str	r0, [r6, #0]
 8005714:	2800      	cmp	r0, #0
 8005716:	d1d5      	bne.n	80056c4 <__sfp+0x24>
 8005718:	f7ff ff78 	bl	800560c <__sfp_lock_release>
 800571c:	230c      	movs	r3, #12
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	e7ee      	b.n	8005700 <__sfp+0x60>
 8005722:	bf00      	nop
 8005724:	08006750 	.word	0x08006750
 8005728:	ffff0001 	.word	0xffff0001

0800572c <_fwalk_reent>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	4606      	mov	r6, r0
 8005732:	4688      	mov	r8, r1
 8005734:	2700      	movs	r7, #0
 8005736:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800573a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800573e:	f1b9 0901 	subs.w	r9, r9, #1
 8005742:	d505      	bpl.n	8005750 <_fwalk_reent+0x24>
 8005744:	6824      	ldr	r4, [r4, #0]
 8005746:	2c00      	cmp	r4, #0
 8005748:	d1f7      	bne.n	800573a <_fwalk_reent+0xe>
 800574a:	4638      	mov	r0, r7
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005750:	89ab      	ldrh	r3, [r5, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d907      	bls.n	8005766 <_fwalk_reent+0x3a>
 8005756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800575a:	3301      	adds	r3, #1
 800575c:	d003      	beq.n	8005766 <_fwalk_reent+0x3a>
 800575e:	4629      	mov	r1, r5
 8005760:	4630      	mov	r0, r6
 8005762:	47c0      	blx	r8
 8005764:	4307      	orrs	r7, r0
 8005766:	3568      	adds	r5, #104	; 0x68
 8005768:	e7e9      	b.n	800573e <_fwalk_reent+0x12>
	...

0800576c <_localeconv_r>:
 800576c:	4800      	ldr	r0, [pc, #0]	; (8005770 <_localeconv_r+0x4>)
 800576e:	4770      	bx	lr
 8005770:	200007a4 	.word	0x200007a4

08005774 <__retarget_lock_init_recursive>:
 8005774:	4770      	bx	lr

08005776 <__retarget_lock_acquire_recursive>:
 8005776:	4770      	bx	lr

08005778 <__retarget_lock_release_recursive>:
 8005778:	4770      	bx	lr

0800577a <__swhatbuf_r>:
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	460e      	mov	r6, r1
 800577e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005782:	4614      	mov	r4, r2
 8005784:	2900      	cmp	r1, #0
 8005786:	461d      	mov	r5, r3
 8005788:	b096      	sub	sp, #88	; 0x58
 800578a:	da08      	bge.n	800579e <__swhatbuf_r+0x24>
 800578c:	2200      	movs	r2, #0
 800578e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	061a      	lsls	r2, r3, #24
 8005796:	d410      	bmi.n	80057ba <__swhatbuf_r+0x40>
 8005798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800579c:	e00e      	b.n	80057bc <__swhatbuf_r+0x42>
 800579e:	466a      	mov	r2, sp
 80057a0:	f000 fee4 	bl	800656c <_fstat_r>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	dbf1      	blt.n	800578c <__swhatbuf_r+0x12>
 80057a8:	9a01      	ldr	r2, [sp, #4]
 80057aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057b2:	425a      	negs	r2, r3
 80057b4:	415a      	adcs	r2, r3
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	e7ee      	b.n	8005798 <__swhatbuf_r+0x1e>
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	2000      	movs	r0, #0
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	b016      	add	sp, #88	; 0x58
 80057c2:	bd70      	pop	{r4, r5, r6, pc}

080057c4 <__smakebuf_r>:
 80057c4:	898b      	ldrh	r3, [r1, #12]
 80057c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057c8:	079d      	lsls	r5, r3, #30
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	d507      	bpl.n	80057e0 <__smakebuf_r+0x1c>
 80057d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	2301      	movs	r3, #1
 80057da:	6163      	str	r3, [r4, #20]
 80057dc:	b002      	add	sp, #8
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	466a      	mov	r2, sp
 80057e2:	ab01      	add	r3, sp, #4
 80057e4:	f7ff ffc9 	bl	800577a <__swhatbuf_r>
 80057e8:	9900      	ldr	r1, [sp, #0]
 80057ea:	4605      	mov	r5, r0
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 fc4b 	bl	8006088 <_malloc_r>
 80057f2:	b948      	cbnz	r0, 8005808 <__smakebuf_r+0x44>
 80057f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f8:	059a      	lsls	r2, r3, #22
 80057fa:	d4ef      	bmi.n	80057dc <__smakebuf_r+0x18>
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	e7e3      	b.n	80057d0 <__smakebuf_r+0xc>
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <__smakebuf_r+0x7c>)
 800580a:	62b3      	str	r3, [r6, #40]	; 0x28
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	6020      	str	r0, [r4, #0]
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	6120      	str	r0, [r4, #16]
 800581a:	6163      	str	r3, [r4, #20]
 800581c:	9b01      	ldr	r3, [sp, #4]
 800581e:	b15b      	cbz	r3, 8005838 <__smakebuf_r+0x74>
 8005820:	4630      	mov	r0, r6
 8005822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005826:	f000 feb3 	bl	8006590 <_isatty_r>
 800582a:	b128      	cbz	r0, 8005838 <__smakebuf_r+0x74>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	89a0      	ldrh	r0, [r4, #12]
 800583a:	4305      	orrs	r5, r0
 800583c:	81a5      	strh	r5, [r4, #12]
 800583e:	e7cd      	b.n	80057dc <__smakebuf_r+0x18>
 8005840:	080055c9 	.word	0x080055c9

08005844 <malloc>:
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <malloc+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f000 bc1d 	b.w	8006088 <_malloc_r>
 800584e:	bf00      	nop
 8005850:	20000650 	.word	0x20000650

08005854 <memchr>:
 8005854:	4603      	mov	r3, r0
 8005856:	b510      	push	{r4, lr}
 8005858:	b2c9      	uxtb	r1, r1
 800585a:	4402      	add	r2, r0
 800585c:	4293      	cmp	r3, r2
 800585e:	4618      	mov	r0, r3
 8005860:	d101      	bne.n	8005866 <memchr+0x12>
 8005862:	2000      	movs	r0, #0
 8005864:	e003      	b.n	800586e <memchr+0x1a>
 8005866:	7804      	ldrb	r4, [r0, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	428c      	cmp	r4, r1
 800586c:	d1f6      	bne.n	800585c <memchr+0x8>
 800586e:	bd10      	pop	{r4, pc}

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	4291      	cmp	r1, r2
 8005884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <_Balloc>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005890:	4604      	mov	r4, r0
 8005892:	460d      	mov	r5, r1
 8005894:	b976      	cbnz	r6, 80058b4 <_Balloc+0x28>
 8005896:	2010      	movs	r0, #16
 8005898:	f7ff ffd4 	bl	8005844 <malloc>
 800589c:	4602      	mov	r2, r0
 800589e:	6260      	str	r0, [r4, #36]	; 0x24
 80058a0:	b920      	cbnz	r0, 80058ac <_Balloc+0x20>
 80058a2:	2166      	movs	r1, #102	; 0x66
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <_Balloc+0x78>)
 80058a6:	4818      	ldr	r0, [pc, #96]	; (8005908 <_Balloc+0x7c>)
 80058a8:	f000 fe20 	bl	80064ec <__assert_func>
 80058ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b0:	6006      	str	r6, [r0, #0]
 80058b2:	60c6      	str	r6, [r0, #12]
 80058b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058b6:	68f3      	ldr	r3, [r6, #12]
 80058b8:	b183      	cbz	r3, 80058dc <_Balloc+0x50>
 80058ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058c2:	b9b8      	cbnz	r0, 80058f4 <_Balloc+0x68>
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ca:	1d72      	adds	r2, r6, #5
 80058cc:	4620      	mov	r0, r4
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	f000 fb5e 	bl	8005f90 <_calloc_r>
 80058d4:	b160      	cbz	r0, 80058f0 <_Balloc+0x64>
 80058d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058da:	e00e      	b.n	80058fa <_Balloc+0x6e>
 80058dc:	2221      	movs	r2, #33	; 0x21
 80058de:	2104      	movs	r1, #4
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 fb55 	bl	8005f90 <_calloc_r>
 80058e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e8:	60f0      	str	r0, [r6, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e4      	bne.n	80058ba <_Balloc+0x2e>
 80058f0:	2000      	movs	r0, #0
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	6802      	ldr	r2, [r0, #0]
 80058f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058fa:	2300      	movs	r3, #0
 80058fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005900:	e7f7      	b.n	80058f2 <_Balloc+0x66>
 8005902:	bf00      	nop
 8005904:	08006795 	.word	0x08006795
 8005908:	08006878 	.word	0x08006878

0800590c <_Bfree>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005910:	4605      	mov	r5, r0
 8005912:	460c      	mov	r4, r1
 8005914:	b976      	cbnz	r6, 8005934 <_Bfree+0x28>
 8005916:	2010      	movs	r0, #16
 8005918:	f7ff ff94 	bl	8005844 <malloc>
 800591c:	4602      	mov	r2, r0
 800591e:	6268      	str	r0, [r5, #36]	; 0x24
 8005920:	b920      	cbnz	r0, 800592c <_Bfree+0x20>
 8005922:	218a      	movs	r1, #138	; 0x8a
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <_Bfree+0x3c>)
 8005926:	4809      	ldr	r0, [pc, #36]	; (800594c <_Bfree+0x40>)
 8005928:	f000 fde0 	bl	80064ec <__assert_func>
 800592c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005930:	6006      	str	r6, [r0, #0]
 8005932:	60c6      	str	r6, [r0, #12]
 8005934:	b13c      	cbz	r4, 8005946 <_Bfree+0x3a>
 8005936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005938:	6862      	ldr	r2, [r4, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005940:	6021      	str	r1, [r4, #0]
 8005942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	08006795 	.word	0x08006795
 800594c:	08006878 	.word	0x08006878

08005950 <__multadd>:
 8005950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005954:	4607      	mov	r7, r0
 8005956:	460c      	mov	r4, r1
 8005958:	461e      	mov	r6, r3
 800595a:	2000      	movs	r0, #0
 800595c:	690d      	ldr	r5, [r1, #16]
 800595e:	f101 0c14 	add.w	ip, r1, #20
 8005962:	f8dc 3000 	ldr.w	r3, [ip]
 8005966:	3001      	adds	r0, #1
 8005968:	b299      	uxth	r1, r3
 800596a:	fb02 6101 	mla	r1, r2, r1, r6
 800596e:	0c1e      	lsrs	r6, r3, #16
 8005970:	0c0b      	lsrs	r3, r1, #16
 8005972:	fb02 3306 	mla	r3, r2, r6, r3
 8005976:	b289      	uxth	r1, r1
 8005978:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800597c:	4285      	cmp	r5, r0
 800597e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005982:	f84c 1b04 	str.w	r1, [ip], #4
 8005986:	dcec      	bgt.n	8005962 <__multadd+0x12>
 8005988:	b30e      	cbz	r6, 80059ce <__multadd+0x7e>
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc19      	bgt.n	80059c4 <__multadd+0x74>
 8005990:	6861      	ldr	r1, [r4, #4]
 8005992:	4638      	mov	r0, r7
 8005994:	3101      	adds	r1, #1
 8005996:	f7ff ff79 	bl	800588c <_Balloc>
 800599a:	4680      	mov	r8, r0
 800599c:	b928      	cbnz	r0, 80059aa <__multadd+0x5a>
 800599e:	4602      	mov	r2, r0
 80059a0:	21b5      	movs	r1, #181	; 0xb5
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <__multadd+0x84>)
 80059a4:	480c      	ldr	r0, [pc, #48]	; (80059d8 <__multadd+0x88>)
 80059a6:	f000 fda1 	bl	80064ec <__assert_func>
 80059aa:	6922      	ldr	r2, [r4, #16]
 80059ac:	f104 010c 	add.w	r1, r4, #12
 80059b0:	3202      	adds	r2, #2
 80059b2:	0092      	lsls	r2, r2, #2
 80059b4:	300c      	adds	r0, #12
 80059b6:	f7ff ff5b 	bl	8005870 <memcpy>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff ffa5 	bl	800590c <_Bfree>
 80059c2:	4644      	mov	r4, r8
 80059c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059c8:	3501      	adds	r5, #1
 80059ca:	615e      	str	r6, [r3, #20]
 80059cc:	6125      	str	r5, [r4, #16]
 80059ce:	4620      	mov	r0, r4
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d4:	08006807 	.word	0x08006807
 80059d8:	08006878 	.word	0x08006878

080059dc <__hi0bits>:
 80059dc:	0c02      	lsrs	r2, r0, #16
 80059de:	0412      	lsls	r2, r2, #16
 80059e0:	4603      	mov	r3, r0
 80059e2:	b9ca      	cbnz	r2, 8005a18 <__hi0bits+0x3c>
 80059e4:	0403      	lsls	r3, r0, #16
 80059e6:	2010      	movs	r0, #16
 80059e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059ec:	bf04      	itt	eq
 80059ee:	021b      	lsleq	r3, r3, #8
 80059f0:	3008      	addeq	r0, #8
 80059f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059f6:	bf04      	itt	eq
 80059f8:	011b      	lsleq	r3, r3, #4
 80059fa:	3004      	addeq	r0, #4
 80059fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a00:	bf04      	itt	eq
 8005a02:	009b      	lsleq	r3, r3, #2
 8005a04:	3002      	addeq	r0, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	db05      	blt.n	8005a16 <__hi0bits+0x3a>
 8005a0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a0e:	f100 0001 	add.w	r0, r0, #1
 8005a12:	bf08      	it	eq
 8005a14:	2020      	moveq	r0, #32
 8005a16:	4770      	bx	lr
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e7e5      	b.n	80059e8 <__hi0bits+0xc>

08005a1c <__lo0bits>:
 8005a1c:	6803      	ldr	r3, [r0, #0]
 8005a1e:	4602      	mov	r2, r0
 8005a20:	f013 0007 	ands.w	r0, r3, #7
 8005a24:	d00b      	beq.n	8005a3e <__lo0bits+0x22>
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	d421      	bmi.n	8005a6e <__lo0bits+0x52>
 8005a2a:	0798      	lsls	r0, r3, #30
 8005a2c:	bf49      	itett	mi
 8005a2e:	085b      	lsrmi	r3, r3, #1
 8005a30:	089b      	lsrpl	r3, r3, #2
 8005a32:	2001      	movmi	r0, #1
 8005a34:	6013      	strmi	r3, [r2, #0]
 8005a36:	bf5c      	itt	pl
 8005a38:	2002      	movpl	r0, #2
 8005a3a:	6013      	strpl	r3, [r2, #0]
 8005a3c:	4770      	bx	lr
 8005a3e:	b299      	uxth	r1, r3
 8005a40:	b909      	cbnz	r1, 8005a46 <__lo0bits+0x2a>
 8005a42:	2010      	movs	r0, #16
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	b2d9      	uxtb	r1, r3
 8005a48:	b909      	cbnz	r1, 8005a4e <__lo0bits+0x32>
 8005a4a:	3008      	adds	r0, #8
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	0719      	lsls	r1, r3, #28
 8005a50:	bf04      	itt	eq
 8005a52:	091b      	lsreq	r3, r3, #4
 8005a54:	3004      	addeq	r0, #4
 8005a56:	0799      	lsls	r1, r3, #30
 8005a58:	bf04      	itt	eq
 8005a5a:	089b      	lsreq	r3, r3, #2
 8005a5c:	3002      	addeq	r0, #2
 8005a5e:	07d9      	lsls	r1, r3, #31
 8005a60:	d403      	bmi.n	8005a6a <__lo0bits+0x4e>
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	f100 0001 	add.w	r0, r0, #1
 8005a68:	d003      	beq.n	8005a72 <__lo0bits+0x56>
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4770      	bx	lr
 8005a6e:	2000      	movs	r0, #0
 8005a70:	4770      	bx	lr
 8005a72:	2020      	movs	r0, #32
 8005a74:	4770      	bx	lr
	...

08005a78 <__i2b>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	f7ff ff05 	bl	800588c <_Balloc>
 8005a82:	4602      	mov	r2, r0
 8005a84:	b928      	cbnz	r0, 8005a92 <__i2b+0x1a>
 8005a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <__i2b+0x24>)
 8005a8c:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <__i2b+0x28>)
 8005a8e:	f000 fd2d 	bl	80064ec <__assert_func>
 8005a92:	2301      	movs	r3, #1
 8005a94:	6144      	str	r4, [r0, #20]
 8005a96:	6103      	str	r3, [r0, #16]
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08006807 	.word	0x08006807
 8005aa0:	08006878 	.word	0x08006878

08005aa4 <__multiply>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	4691      	mov	r9, r2
 8005aaa:	690a      	ldr	r2, [r1, #16]
 8005aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bfbe      	ittt	lt
 8005ab6:	460b      	movlt	r3, r1
 8005ab8:	464c      	movlt	r4, r9
 8005aba:	4699      	movlt	r9, r3
 8005abc:	6927      	ldr	r7, [r4, #16]
 8005abe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	6861      	ldr	r1, [r4, #4]
 8005ac6:	eb07 060a 	add.w	r6, r7, sl
 8005aca:	42b3      	cmp	r3, r6
 8005acc:	b085      	sub	sp, #20
 8005ace:	bfb8      	it	lt
 8005ad0:	3101      	addlt	r1, #1
 8005ad2:	f7ff fedb 	bl	800588c <_Balloc>
 8005ad6:	b930      	cbnz	r0, 8005ae6 <__multiply+0x42>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	f240 115d 	movw	r1, #349	; 0x15d
 8005ade:	4b43      	ldr	r3, [pc, #268]	; (8005bec <__multiply+0x148>)
 8005ae0:	4843      	ldr	r0, [pc, #268]	; (8005bf0 <__multiply+0x14c>)
 8005ae2:	f000 fd03 	bl	80064ec <__assert_func>
 8005ae6:	f100 0514 	add.w	r5, r0, #20
 8005aea:	462b      	mov	r3, r5
 8005aec:	2200      	movs	r2, #0
 8005aee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af2:	4543      	cmp	r3, r8
 8005af4:	d321      	bcc.n	8005b3a <__multiply+0x96>
 8005af6:	f104 0314 	add.w	r3, r4, #20
 8005afa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005afe:	f109 0314 	add.w	r3, r9, #20
 8005b02:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b06:	9202      	str	r2, [sp, #8]
 8005b08:	1b3a      	subs	r2, r7, r4
 8005b0a:	3a15      	subs	r2, #21
 8005b0c:	f022 0203 	bic.w	r2, r2, #3
 8005b10:	3204      	adds	r2, #4
 8005b12:	f104 0115 	add.w	r1, r4, #21
 8005b16:	428f      	cmp	r7, r1
 8005b18:	bf38      	it	cc
 8005b1a:	2204      	movcc	r2, #4
 8005b1c:	9201      	str	r2, [sp, #4]
 8005b1e:	9a02      	ldr	r2, [sp, #8]
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d80c      	bhi.n	8005b40 <__multiply+0x9c>
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	dd03      	ble.n	8005b32 <__multiply+0x8e>
 8005b2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d059      	beq.n	8005be6 <__multiply+0x142>
 8005b32:	6106      	str	r6, [r0, #16]
 8005b34:	b005      	add	sp, #20
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	f843 2b04 	str.w	r2, [r3], #4
 8005b3e:	e7d8      	b.n	8005af2 <__multiply+0x4e>
 8005b40:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b44:	f1ba 0f00 	cmp.w	sl, #0
 8005b48:	d023      	beq.n	8005b92 <__multiply+0xee>
 8005b4a:	46a9      	mov	r9, r5
 8005b4c:	f04f 0c00 	mov.w	ip, #0
 8005b50:	f104 0e14 	add.w	lr, r4, #20
 8005b54:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b58:	f8d9 1000 	ldr.w	r1, [r9]
 8005b5c:	fa1f fb82 	uxth.w	fp, r2
 8005b60:	b289      	uxth	r1, r1
 8005b62:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b66:	4461      	add	r1, ip
 8005b68:	f8d9 c000 	ldr.w	ip, [r9]
 8005b6c:	0c12      	lsrs	r2, r2, #16
 8005b6e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b72:	fb0a c202 	mla	r2, sl, r2, ip
 8005b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b7a:	b289      	uxth	r1, r1
 8005b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b80:	4577      	cmp	r7, lr
 8005b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b86:	f849 1b04 	str.w	r1, [r9], #4
 8005b8a:	d8e3      	bhi.n	8005b54 <__multiply+0xb0>
 8005b8c:	9a01      	ldr	r2, [sp, #4]
 8005b8e:	f845 c002 	str.w	ip, [r5, r2]
 8005b92:	9a03      	ldr	r2, [sp, #12]
 8005b94:	3304      	adds	r3, #4
 8005b96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b9a:	f1b9 0f00 	cmp.w	r9, #0
 8005b9e:	d020      	beq.n	8005be2 <__multiply+0x13e>
 8005ba0:	46ae      	mov	lr, r5
 8005ba2:	f04f 0a00 	mov.w	sl, #0
 8005ba6:	6829      	ldr	r1, [r5, #0]
 8005ba8:	f104 0c14 	add.w	ip, r4, #20
 8005bac:	f8bc b000 	ldrh.w	fp, [ip]
 8005bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bb4:	b289      	uxth	r1, r1
 8005bb6:	fb09 220b 	mla	r2, r9, fp, r2
 8005bba:	4492      	add	sl, r2
 8005bbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8005bc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8005bcc:	0c12      	lsrs	r2, r2, #16
 8005bce:	fb09 1102 	mla	r1, r9, r2, r1
 8005bd2:	4567      	cmp	r7, ip
 8005bd4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bdc:	d8e6      	bhi.n	8005bac <__multiply+0x108>
 8005bde:	9a01      	ldr	r2, [sp, #4]
 8005be0:	50a9      	str	r1, [r5, r2]
 8005be2:	3504      	adds	r5, #4
 8005be4:	e79b      	b.n	8005b1e <__multiply+0x7a>
 8005be6:	3e01      	subs	r6, #1
 8005be8:	e79d      	b.n	8005b26 <__multiply+0x82>
 8005bea:	bf00      	nop
 8005bec:	08006807 	.word	0x08006807
 8005bf0:	08006878 	.word	0x08006878

08005bf4 <__pow5mult>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	f012 0203 	ands.w	r2, r2, #3
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	d007      	beq.n	8005c14 <__pow5mult+0x20>
 8005c04:	4c25      	ldr	r4, [pc, #148]	; (8005c9c <__pow5mult+0xa8>)
 8005c06:	3a01      	subs	r2, #1
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c0e:	f7ff fe9f 	bl	8005950 <__multadd>
 8005c12:	4607      	mov	r7, r0
 8005c14:	10ad      	asrs	r5, r5, #2
 8005c16:	d03d      	beq.n	8005c94 <__pow5mult+0xa0>
 8005c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c1a:	b97c      	cbnz	r4, 8005c3c <__pow5mult+0x48>
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	f7ff fe11 	bl	8005844 <malloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6270      	str	r0, [r6, #36]	; 0x24
 8005c26:	b928      	cbnz	r0, 8005c34 <__pow5mult+0x40>
 8005c28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <__pow5mult+0xac>)
 8005c2e:	481d      	ldr	r0, [pc, #116]	; (8005ca4 <__pow5mult+0xb0>)
 8005c30:	f000 fc5c 	bl	80064ec <__assert_func>
 8005c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c38:	6004      	str	r4, [r0, #0]
 8005c3a:	60c4      	str	r4, [r0, #12]
 8005c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c44:	b94c      	cbnz	r4, 8005c5a <__pow5mult+0x66>
 8005c46:	f240 2171 	movw	r1, #625	; 0x271
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ff14 	bl	8005a78 <__i2b>
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	07eb      	lsls	r3, r5, #31
 8005c60:	d50a      	bpl.n	8005c78 <__pow5mult+0x84>
 8005c62:	4639      	mov	r1, r7
 8005c64:	4622      	mov	r2, r4
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ff1c 	bl	8005aa4 <__multiply>
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	4639      	mov	r1, r7
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff fe4b 	bl	800590c <_Bfree>
 8005c76:	4647      	mov	r7, r8
 8005c78:	106d      	asrs	r5, r5, #1
 8005c7a:	d00b      	beq.n	8005c94 <__pow5mult+0xa0>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	b938      	cbnz	r0, 8005c90 <__pow5mult+0x9c>
 8005c80:	4622      	mov	r2, r4
 8005c82:	4621      	mov	r1, r4
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ff0d 	bl	8005aa4 <__multiply>
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	f8c0 9000 	str.w	r9, [r0]
 8005c90:	4604      	mov	r4, r0
 8005c92:	e7e4      	b.n	8005c5e <__pow5mult+0x6a>
 8005c94:	4638      	mov	r0, r7
 8005c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9a:	bf00      	nop
 8005c9c:	080069c8 	.word	0x080069c8
 8005ca0:	08006795 	.word	0x08006795
 8005ca4:	08006878 	.word	0x08006878

08005ca8 <__lshift>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	4607      	mov	r7, r0
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6849      	ldr	r1, [r1, #4]
 8005cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc0:	f108 0601 	add.w	r6, r8, #1
 8005cc4:	42b3      	cmp	r3, r6
 8005cc6:	db0b      	blt.n	8005ce0 <__lshift+0x38>
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff fddf 	bl	800588c <_Balloc>
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b948      	cbnz	r0, 8005ce6 <__lshift+0x3e>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <__lshift+0xd8>)
 8005cda:	482a      	ldr	r0, [pc, #168]	; (8005d84 <__lshift+0xdc>)
 8005cdc:	f000 fc06 	bl	80064ec <__assert_func>
 8005ce0:	3101      	adds	r1, #1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__lshift+0x1c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f100 0114 	add.w	r1, r0, #20
 8005cec:	f100 0210 	add.w	r2, r0, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	4553      	cmp	r3, sl
 8005cf4:	db37      	blt.n	8005d66 <__lshift+0xbe>
 8005cf6:	6920      	ldr	r0, [r4, #16]
 8005cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cfc:	f104 0314 	add.w	r3, r4, #20
 8005d00:	f019 091f 	ands.w	r9, r9, #31
 8005d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d0c:	d02f      	beq.n	8005d6e <__lshift+0xc6>
 8005d0e:	468a      	mov	sl, r1
 8005d10:	f04f 0c00 	mov.w	ip, #0
 8005d14:	f1c9 0e20 	rsb	lr, r9, #32
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	fa02 f209 	lsl.w	r2, r2, r9
 8005d1e:	ea42 020c 	orr.w	r2, r2, ip
 8005d22:	f84a 2b04 	str.w	r2, [sl], #4
 8005d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d30:	d8f2      	bhi.n	8005d18 <__lshift+0x70>
 8005d32:	1b03      	subs	r3, r0, r4
 8005d34:	3b15      	subs	r3, #21
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	f104 0215 	add.w	r2, r4, #21
 8005d40:	4290      	cmp	r0, r2
 8005d42:	bf38      	it	cc
 8005d44:	2304      	movcc	r3, #4
 8005d46:	f841 c003 	str.w	ip, [r1, r3]
 8005d4a:	f1bc 0f00 	cmp.w	ip, #0
 8005d4e:	d001      	beq.n	8005d54 <__lshift+0xac>
 8005d50:	f108 0602 	add.w	r6, r8, #2
 8005d54:	3e01      	subs	r6, #1
 8005d56:	4638      	mov	r0, r7
 8005d58:	4621      	mov	r1, r4
 8005d5a:	612e      	str	r6, [r5, #16]
 8005d5c:	f7ff fdd6 	bl	800590c <_Bfree>
 8005d60:	4628      	mov	r0, r5
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	e7c1      	b.n	8005cf2 <__lshift+0x4a>
 8005d6e:	3904      	subs	r1, #4
 8005d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d74:	4298      	cmp	r0, r3
 8005d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d7a:	d8f9      	bhi.n	8005d70 <__lshift+0xc8>
 8005d7c:	e7ea      	b.n	8005d54 <__lshift+0xac>
 8005d7e:	bf00      	nop
 8005d80:	08006807 	.word	0x08006807
 8005d84:	08006878 	.word	0x08006878

08005d88 <__mcmp>:
 8005d88:	4603      	mov	r3, r0
 8005d8a:	690a      	ldr	r2, [r1, #16]
 8005d8c:	6900      	ldr	r0, [r0, #16]
 8005d8e:	b530      	push	{r4, r5, lr}
 8005d90:	1a80      	subs	r0, r0, r2
 8005d92:	d10d      	bne.n	8005db0 <__mcmp+0x28>
 8005d94:	3314      	adds	r3, #20
 8005d96:	3114      	adds	r1, #20
 8005d98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005da8:	4295      	cmp	r5, r2
 8005daa:	d002      	beq.n	8005db2 <__mcmp+0x2a>
 8005dac:	d304      	bcc.n	8005db8 <__mcmp+0x30>
 8005dae:	2001      	movs	r0, #1
 8005db0:	bd30      	pop	{r4, r5, pc}
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	d3f4      	bcc.n	8005da0 <__mcmp+0x18>
 8005db6:	e7fb      	b.n	8005db0 <__mcmp+0x28>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e7f8      	b.n	8005db0 <__mcmp+0x28>
	...

08005dc0 <__mdiff>:
 8005dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4614      	mov	r4, r2
 8005dce:	f7ff ffdb 	bl	8005d88 <__mcmp>
 8005dd2:	1e06      	subs	r6, r0, #0
 8005dd4:	d111      	bne.n	8005dfa <__mdiff+0x3a>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff fd57 	bl	800588c <_Balloc>
 8005dde:	4602      	mov	r2, r0
 8005de0:	b928      	cbnz	r0, 8005dee <__mdiff+0x2e>
 8005de2:	f240 2132 	movw	r1, #562	; 0x232
 8005de6:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <__mdiff+0x110>)
 8005de8:	483a      	ldr	r0, [pc, #232]	; (8005ed4 <__mdiff+0x114>)
 8005dea:	f000 fb7f 	bl	80064ec <__assert_func>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005df4:	4610      	mov	r0, r2
 8005df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	bfa4      	itt	ge
 8005dfc:	4623      	movge	r3, r4
 8005dfe:	462c      	movge	r4, r5
 8005e00:	4638      	mov	r0, r7
 8005e02:	6861      	ldr	r1, [r4, #4]
 8005e04:	bfa6      	itte	ge
 8005e06:	461d      	movge	r5, r3
 8005e08:	2600      	movge	r6, #0
 8005e0a:	2601      	movlt	r6, #1
 8005e0c:	f7ff fd3e 	bl	800588c <_Balloc>
 8005e10:	4602      	mov	r2, r0
 8005e12:	b918      	cbnz	r0, 8005e1c <__mdiff+0x5c>
 8005e14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e18:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <__mdiff+0x110>)
 8005e1a:	e7e5      	b.n	8005de8 <__mdiff+0x28>
 8005e1c:	f102 0814 	add.w	r8, r2, #20
 8005e20:	46c2      	mov	sl, r8
 8005e22:	f04f 0c00 	mov.w	ip, #0
 8005e26:	6927      	ldr	r7, [r4, #16]
 8005e28:	60c6      	str	r6, [r0, #12]
 8005e2a:	692e      	ldr	r6, [r5, #16]
 8005e2c:	f104 0014 	add.w	r0, r4, #20
 8005e30:	f105 0914 	add.w	r9, r5, #20
 8005e34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e3c:	3410      	adds	r4, #16
 8005e3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e42:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e46:	fa1f f18b 	uxth.w	r1, fp
 8005e4a:	448c      	add	ip, r1
 8005e4c:	b299      	uxth	r1, r3
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	ebac 0101 	sub.w	r1, ip, r1
 8005e54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e5c:	b289      	uxth	r1, r1
 8005e5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e62:	454e      	cmp	r6, r9
 8005e64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e68:	f84a 3b04 	str.w	r3, [sl], #4
 8005e6c:	d8e7      	bhi.n	8005e3e <__mdiff+0x7e>
 8005e6e:	1b73      	subs	r3, r6, r5
 8005e70:	3b15      	subs	r3, #21
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	3515      	adds	r5, #21
 8005e78:	3304      	adds	r3, #4
 8005e7a:	42ae      	cmp	r6, r5
 8005e7c:	bf38      	it	cc
 8005e7e:	2304      	movcc	r3, #4
 8005e80:	4418      	add	r0, r3
 8005e82:	4443      	add	r3, r8
 8005e84:	461e      	mov	r6, r3
 8005e86:	4605      	mov	r5, r0
 8005e88:	4575      	cmp	r5, lr
 8005e8a:	d30e      	bcc.n	8005eaa <__mdiff+0xea>
 8005e8c:	f10e 0103 	add.w	r1, lr, #3
 8005e90:	1a09      	subs	r1, r1, r0
 8005e92:	f021 0103 	bic.w	r1, r1, #3
 8005e96:	3803      	subs	r0, #3
 8005e98:	4586      	cmp	lr, r0
 8005e9a:	bf38      	it	cc
 8005e9c:	2100      	movcc	r1, #0
 8005e9e:	4419      	add	r1, r3
 8005ea0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ea4:	b18b      	cbz	r3, 8005eca <__mdiff+0x10a>
 8005ea6:	6117      	str	r7, [r2, #16]
 8005ea8:	e7a4      	b.n	8005df4 <__mdiff+0x34>
 8005eaa:	f855 8b04 	ldr.w	r8, [r5], #4
 8005eae:	fa1f f188 	uxth.w	r1, r8
 8005eb2:	4461      	add	r1, ip
 8005eb4:	140c      	asrs	r4, r1, #16
 8005eb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005eba:	b289      	uxth	r1, r1
 8005ebc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ec0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ec4:	f846 1b04 	str.w	r1, [r6], #4
 8005ec8:	e7de      	b.n	8005e88 <__mdiff+0xc8>
 8005eca:	3f01      	subs	r7, #1
 8005ecc:	e7e8      	b.n	8005ea0 <__mdiff+0xe0>
 8005ece:	bf00      	nop
 8005ed0:	08006807 	.word	0x08006807
 8005ed4:	08006878 	.word	0x08006878

08005ed8 <__d2b>:
 8005ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005edc:	2101      	movs	r1, #1
 8005ede:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	461d      	mov	r5, r3
 8005ee6:	f7ff fcd1 	bl	800588c <_Balloc>
 8005eea:	4604      	mov	r4, r0
 8005eec:	b930      	cbnz	r0, 8005efc <__d2b+0x24>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <__d2b+0xb0>)
 8005ef6:	4825      	ldr	r0, [pc, #148]	; (8005f8c <__d2b+0xb4>)
 8005ef8:	f000 faf8 	bl	80064ec <__assert_func>
 8005efc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f04:	bb2d      	cbnz	r5, 8005f52 <__d2b+0x7a>
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	f1b8 0300 	subs.w	r3, r8, #0
 8005f0c:	d026      	beq.n	8005f5c <__d2b+0x84>
 8005f0e:	4668      	mov	r0, sp
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f7ff fd83 	bl	8005a1c <__lo0bits>
 8005f16:	9900      	ldr	r1, [sp, #0]
 8005f18:	b1f0      	cbz	r0, 8005f58 <__d2b+0x80>
 8005f1a:	9a01      	ldr	r2, [sp, #4]
 8005f1c:	f1c0 0320 	rsb	r3, r0, #32
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	430b      	orrs	r3, r1
 8005f26:	40c2      	lsrs	r2, r0
 8005f28:	6163      	str	r3, [r4, #20]
 8005f2a:	9201      	str	r2, [sp, #4]
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf14      	ite	ne
 8005f32:	2102      	movne	r1, #2
 8005f34:	2101      	moveq	r1, #1
 8005f36:	61a3      	str	r3, [r4, #24]
 8005f38:	6121      	str	r1, [r4, #16]
 8005f3a:	b1c5      	cbz	r5, 8005f6e <__d2b+0x96>
 8005f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f40:	4405      	add	r5, r0
 8005f42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f46:	603d      	str	r5, [r7, #0]
 8005f48:	6030      	str	r0, [r6, #0]
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	b002      	add	sp, #8
 8005f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f56:	e7d6      	b.n	8005f06 <__d2b+0x2e>
 8005f58:	6161      	str	r1, [r4, #20]
 8005f5a:	e7e7      	b.n	8005f2c <__d2b+0x54>
 8005f5c:	a801      	add	r0, sp, #4
 8005f5e:	f7ff fd5d 	bl	8005a1c <__lo0bits>
 8005f62:	2101      	movs	r1, #1
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	6121      	str	r1, [r4, #16]
 8005f68:	6163      	str	r3, [r4, #20]
 8005f6a:	3020      	adds	r0, #32
 8005f6c:	e7e5      	b.n	8005f3a <__d2b+0x62>
 8005f6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f76:	6038      	str	r0, [r7, #0]
 8005f78:	6918      	ldr	r0, [r3, #16]
 8005f7a:	f7ff fd2f 	bl	80059dc <__hi0bits>
 8005f7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f82:	6031      	str	r1, [r6, #0]
 8005f84:	e7e1      	b.n	8005f4a <__d2b+0x72>
 8005f86:	bf00      	nop
 8005f88:	08006807 	.word	0x08006807
 8005f8c:	08006878 	.word	0x08006878

08005f90 <_calloc_r>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	fba1 5402 	umull	r5, r4, r1, r2
 8005f96:	b934      	cbnz	r4, 8005fa6 <_calloc_r+0x16>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f000 f875 	bl	8006088 <_malloc_r>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	b928      	cbnz	r0, 8005fae <_calloc_r+0x1e>
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	2600      	movs	r6, #0
 8005faa:	6002      	str	r2, [r0, #0]
 8005fac:	e7f9      	b.n	8005fa2 <_calloc_r+0x12>
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	f7fd fe0d 	bl	8003bd0 <memset>
 8005fb6:	e7f4      	b.n	8005fa2 <_calloc_r+0x12>

08005fb8 <_free_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4605      	mov	r5, r0
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d040      	beq.n	8006042 <_free_r+0x8a>
 8005fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc4:	1f0c      	subs	r4, r1, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	18e4      	addlt	r4, r4, r3
 8005fcc:	f000 fb14 	bl	80065f8 <__malloc_lock>
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <_free_r+0x8c>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	b933      	cbnz	r3, 8005fe4 <_free_r+0x2c>
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6014      	str	r4, [r2, #0]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe0:	f000 bb10 	b.w	8006604 <__malloc_unlock>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d908      	bls.n	8005ffa <_free_r+0x42>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf01      	itttt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	e7ed      	b.n	8005fd6 <_free_r+0x1e>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x4c>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x42>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1850      	adds	r0, r2, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x6c>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1850      	adds	r0, r2, r1
 8006012:	4283      	cmp	r3, r0
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1e0      	bne.n	8005fda <_free_r+0x22>
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4401      	add	r1, r0
 800601e:	6011      	str	r1, [r2, #0]
 8006020:	6053      	str	r3, [r2, #4]
 8006022:	e7da      	b.n	8005fda <_free_r+0x22>
 8006024:	d902      	bls.n	800602c <_free_r+0x74>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d6      	b.n	8005fda <_free_r+0x22>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1809      	addeq	r1, r1, r0
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	6054      	str	r4, [r2, #4]
 8006040:	e7cb      	b.n	8005fda <_free_r+0x22>
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000990 	.word	0x20000990

08006048 <sbrk_aligned>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4e0e      	ldr	r6, [pc, #56]	; (8006084 <sbrk_aligned+0x3c>)
 800604c:	460c      	mov	r4, r1
 800604e:	6831      	ldr	r1, [r6, #0]
 8006050:	4605      	mov	r5, r0
 8006052:	b911      	cbnz	r1, 800605a <sbrk_aligned+0x12>
 8006054:	f000 f9e4 	bl	8006420 <_sbrk_r>
 8006058:	6030      	str	r0, [r6, #0]
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f9df 	bl	8006420 <_sbrk_r>
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	d00a      	beq.n	800607c <sbrk_aligned+0x34>
 8006066:	1cc4      	adds	r4, r0, #3
 8006068:	f024 0403 	bic.w	r4, r4, #3
 800606c:	42a0      	cmp	r0, r4
 800606e:	d007      	beq.n	8006080 <sbrk_aligned+0x38>
 8006070:	1a21      	subs	r1, r4, r0
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f9d4 	bl	8006420 <_sbrk_r>
 8006078:	3001      	adds	r0, #1
 800607a:	d101      	bne.n	8006080 <sbrk_aligned+0x38>
 800607c:	f04f 34ff 	mov.w	r4, #4294967295
 8006080:	4620      	mov	r0, r4
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	20000994 	.word	0x20000994

08006088 <_malloc_r>:
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608c:	1ccd      	adds	r5, r1, #3
 800608e:	f025 0503 	bic.w	r5, r5, #3
 8006092:	3508      	adds	r5, #8
 8006094:	2d0c      	cmp	r5, #12
 8006096:	bf38      	it	cc
 8006098:	250c      	movcc	r5, #12
 800609a:	2d00      	cmp	r5, #0
 800609c:	4607      	mov	r7, r0
 800609e:	db01      	blt.n	80060a4 <_malloc_r+0x1c>
 80060a0:	42a9      	cmp	r1, r5
 80060a2:	d905      	bls.n	80060b0 <_malloc_r+0x28>
 80060a4:	230c      	movs	r3, #12
 80060a6:	2600      	movs	r6, #0
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4630      	mov	r0, r6
 80060ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b0:	4e2e      	ldr	r6, [pc, #184]	; (800616c <_malloc_r+0xe4>)
 80060b2:	f000 faa1 	bl	80065f8 <__malloc_lock>
 80060b6:	6833      	ldr	r3, [r6, #0]
 80060b8:	461c      	mov	r4, r3
 80060ba:	bb34      	cbnz	r4, 800610a <_malloc_r+0x82>
 80060bc:	4629      	mov	r1, r5
 80060be:	4638      	mov	r0, r7
 80060c0:	f7ff ffc2 	bl	8006048 <sbrk_aligned>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	4604      	mov	r4, r0
 80060c8:	d14d      	bne.n	8006166 <_malloc_r+0xde>
 80060ca:	6834      	ldr	r4, [r6, #0]
 80060cc:	4626      	mov	r6, r4
 80060ce:	2e00      	cmp	r6, #0
 80060d0:	d140      	bne.n	8006154 <_malloc_r+0xcc>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	4631      	mov	r1, r6
 80060d6:	4638      	mov	r0, r7
 80060d8:	eb04 0803 	add.w	r8, r4, r3
 80060dc:	f000 f9a0 	bl	8006420 <_sbrk_r>
 80060e0:	4580      	cmp	r8, r0
 80060e2:	d13a      	bne.n	800615a <_malloc_r+0xd2>
 80060e4:	6821      	ldr	r1, [r4, #0]
 80060e6:	3503      	adds	r5, #3
 80060e8:	1a6d      	subs	r5, r5, r1
 80060ea:	f025 0503 	bic.w	r5, r5, #3
 80060ee:	3508      	adds	r5, #8
 80060f0:	2d0c      	cmp	r5, #12
 80060f2:	bf38      	it	cc
 80060f4:	250c      	movcc	r5, #12
 80060f6:	4638      	mov	r0, r7
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7ff ffa5 	bl	8006048 <sbrk_aligned>
 80060fe:	3001      	adds	r0, #1
 8006100:	d02b      	beq.n	800615a <_malloc_r+0xd2>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	442b      	add	r3, r5
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	e00e      	b.n	8006128 <_malloc_r+0xa0>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	1b52      	subs	r2, r2, r5
 800610e:	d41e      	bmi.n	800614e <_malloc_r+0xc6>
 8006110:	2a0b      	cmp	r2, #11
 8006112:	d916      	bls.n	8006142 <_malloc_r+0xba>
 8006114:	1961      	adds	r1, r4, r5
 8006116:	42a3      	cmp	r3, r4
 8006118:	6025      	str	r5, [r4, #0]
 800611a:	bf18      	it	ne
 800611c:	6059      	strne	r1, [r3, #4]
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	bf08      	it	eq
 8006122:	6031      	streq	r1, [r6, #0]
 8006124:	5162      	str	r2, [r4, r5]
 8006126:	604b      	str	r3, [r1, #4]
 8006128:	4638      	mov	r0, r7
 800612a:	f104 060b 	add.w	r6, r4, #11
 800612e:	f000 fa69 	bl	8006604 <__malloc_unlock>
 8006132:	f026 0607 	bic.w	r6, r6, #7
 8006136:	1d23      	adds	r3, r4, #4
 8006138:	1af2      	subs	r2, r6, r3
 800613a:	d0b6      	beq.n	80060aa <_malloc_r+0x22>
 800613c:	1b9b      	subs	r3, r3, r6
 800613e:	50a3      	str	r3, [r4, r2]
 8006140:	e7b3      	b.n	80060aa <_malloc_r+0x22>
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	42a3      	cmp	r3, r4
 8006146:	bf0c      	ite	eq
 8006148:	6032      	streq	r2, [r6, #0]
 800614a:	605a      	strne	r2, [r3, #4]
 800614c:	e7ec      	b.n	8006128 <_malloc_r+0xa0>
 800614e:	4623      	mov	r3, r4
 8006150:	6864      	ldr	r4, [r4, #4]
 8006152:	e7b2      	b.n	80060ba <_malloc_r+0x32>
 8006154:	4634      	mov	r4, r6
 8006156:	6876      	ldr	r6, [r6, #4]
 8006158:	e7b9      	b.n	80060ce <_malloc_r+0x46>
 800615a:	230c      	movs	r3, #12
 800615c:	4638      	mov	r0, r7
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	f000 fa50 	bl	8006604 <__malloc_unlock>
 8006164:	e7a1      	b.n	80060aa <_malloc_r+0x22>
 8006166:	6025      	str	r5, [r4, #0]
 8006168:	e7de      	b.n	8006128 <_malloc_r+0xa0>
 800616a:	bf00      	nop
 800616c:	20000990 	.word	0x20000990

08006170 <__sfputc_r>:
 8006170:	6893      	ldr	r3, [r2, #8]
 8006172:	b410      	push	{r4}
 8006174:	3b01      	subs	r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	6093      	str	r3, [r2, #8]
 800617a:	da07      	bge.n	800618c <__sfputc_r+0x1c>
 800617c:	6994      	ldr	r4, [r2, #24]
 800617e:	42a3      	cmp	r3, r4
 8006180:	db01      	blt.n	8006186 <__sfputc_r+0x16>
 8006182:	290a      	cmp	r1, #10
 8006184:	d102      	bne.n	800618c <__sfputc_r+0x1c>
 8006186:	bc10      	pop	{r4}
 8006188:	f7fe ba00 	b.w	800458c <__swbuf_r>
 800618c:	6813      	ldr	r3, [r2, #0]
 800618e:	1c58      	adds	r0, r3, #1
 8006190:	6010      	str	r0, [r2, #0]
 8006192:	7019      	strb	r1, [r3, #0]
 8006194:	4608      	mov	r0, r1
 8006196:	bc10      	pop	{r4}
 8006198:	4770      	bx	lr

0800619a <__sfputs_r>:
 800619a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619c:	4606      	mov	r6, r0
 800619e:	460f      	mov	r7, r1
 80061a0:	4614      	mov	r4, r2
 80061a2:	18d5      	adds	r5, r2, r3
 80061a4:	42ac      	cmp	r4, r5
 80061a6:	d101      	bne.n	80061ac <__sfputs_r+0x12>
 80061a8:	2000      	movs	r0, #0
 80061aa:	e007      	b.n	80061bc <__sfputs_r+0x22>
 80061ac:	463a      	mov	r2, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b4:	f7ff ffdc 	bl	8006170 <__sfputc_r>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d1f3      	bne.n	80061a4 <__sfputs_r+0xa>
 80061bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061c0 <_vfiprintf_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	460d      	mov	r5, r1
 80061c6:	4614      	mov	r4, r2
 80061c8:	4698      	mov	r8, r3
 80061ca:	4606      	mov	r6, r0
 80061cc:	b09d      	sub	sp, #116	; 0x74
 80061ce:	b118      	cbz	r0, 80061d8 <_vfiprintf_r+0x18>
 80061d0:	6983      	ldr	r3, [r0, #24]
 80061d2:	b90b      	cbnz	r3, 80061d8 <_vfiprintf_r+0x18>
 80061d4:	f7ff fa2c 	bl	8005630 <__sinit>
 80061d8:	4b89      	ldr	r3, [pc, #548]	; (8006400 <_vfiprintf_r+0x240>)
 80061da:	429d      	cmp	r5, r3
 80061dc:	d11b      	bne.n	8006216 <_vfiprintf_r+0x56>
 80061de:	6875      	ldr	r5, [r6, #4]
 80061e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061e2:	07d9      	lsls	r1, r3, #31
 80061e4:	d405      	bmi.n	80061f2 <_vfiprintf_r+0x32>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	059a      	lsls	r2, r3, #22
 80061ea:	d402      	bmi.n	80061f2 <_vfiprintf_r+0x32>
 80061ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ee:	f7ff fac2 	bl	8005776 <__retarget_lock_acquire_recursive>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	071b      	lsls	r3, r3, #28
 80061f6:	d501      	bpl.n	80061fc <_vfiprintf_r+0x3c>
 80061f8:	692b      	ldr	r3, [r5, #16]
 80061fa:	b9eb      	cbnz	r3, 8006238 <_vfiprintf_r+0x78>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4630      	mov	r0, r6
 8006200:	f7fe fa16 	bl	8004630 <__swsetup_r>
 8006204:	b1c0      	cbz	r0, 8006238 <_vfiprintf_r+0x78>
 8006206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006208:	07dc      	lsls	r4, r3, #31
 800620a:	d50e      	bpl.n	800622a <_vfiprintf_r+0x6a>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	b01d      	add	sp, #116	; 0x74
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	4b7b      	ldr	r3, [pc, #492]	; (8006404 <_vfiprintf_r+0x244>)
 8006218:	429d      	cmp	r5, r3
 800621a:	d101      	bne.n	8006220 <_vfiprintf_r+0x60>
 800621c:	68b5      	ldr	r5, [r6, #8]
 800621e:	e7df      	b.n	80061e0 <_vfiprintf_r+0x20>
 8006220:	4b79      	ldr	r3, [pc, #484]	; (8006408 <_vfiprintf_r+0x248>)
 8006222:	429d      	cmp	r5, r3
 8006224:	bf08      	it	eq
 8006226:	68f5      	ldreq	r5, [r6, #12]
 8006228:	e7da      	b.n	80061e0 <_vfiprintf_r+0x20>
 800622a:	89ab      	ldrh	r3, [r5, #12]
 800622c:	0598      	lsls	r0, r3, #22
 800622e:	d4ed      	bmi.n	800620c <_vfiprintf_r+0x4c>
 8006230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006232:	f7ff faa1 	bl	8005778 <__retarget_lock_release_recursive>
 8006236:	e7e9      	b.n	800620c <_vfiprintf_r+0x4c>
 8006238:	2300      	movs	r3, #0
 800623a:	9309      	str	r3, [sp, #36]	; 0x24
 800623c:	2320      	movs	r3, #32
 800623e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006242:	2330      	movs	r3, #48	; 0x30
 8006244:	f04f 0901 	mov.w	r9, #1
 8006248:	f8cd 800c 	str.w	r8, [sp, #12]
 800624c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800640c <_vfiprintf_r+0x24c>
 8006250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006254:	4623      	mov	r3, r4
 8006256:	469a      	mov	sl, r3
 8006258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800625c:	b10a      	cbz	r2, 8006262 <_vfiprintf_r+0xa2>
 800625e:	2a25      	cmp	r2, #37	; 0x25
 8006260:	d1f9      	bne.n	8006256 <_vfiprintf_r+0x96>
 8006262:	ebba 0b04 	subs.w	fp, sl, r4
 8006266:	d00b      	beq.n	8006280 <_vfiprintf_r+0xc0>
 8006268:	465b      	mov	r3, fp
 800626a:	4622      	mov	r2, r4
 800626c:	4629      	mov	r1, r5
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff ff93 	bl	800619a <__sfputs_r>
 8006274:	3001      	adds	r0, #1
 8006276:	f000 80aa 	beq.w	80063ce <_vfiprintf_r+0x20e>
 800627a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800627c:	445a      	add	r2, fp
 800627e:	9209      	str	r2, [sp, #36]	; 0x24
 8006280:	f89a 3000 	ldrb.w	r3, [sl]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80a2 	beq.w	80063ce <_vfiprintf_r+0x20e>
 800628a:	2300      	movs	r3, #0
 800628c:	f04f 32ff 	mov.w	r2, #4294967295
 8006290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006294:	f10a 0a01 	add.w	sl, sl, #1
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062a0:	931a      	str	r3, [sp, #104]	; 0x68
 80062a2:	4654      	mov	r4, sl
 80062a4:	2205      	movs	r2, #5
 80062a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062aa:	4858      	ldr	r0, [pc, #352]	; (800640c <_vfiprintf_r+0x24c>)
 80062ac:	f7ff fad2 	bl	8005854 <memchr>
 80062b0:	9a04      	ldr	r2, [sp, #16]
 80062b2:	b9d8      	cbnz	r0, 80062ec <_vfiprintf_r+0x12c>
 80062b4:	06d1      	lsls	r1, r2, #27
 80062b6:	bf44      	itt	mi
 80062b8:	2320      	movmi	r3, #32
 80062ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062be:	0713      	lsls	r3, r2, #28
 80062c0:	bf44      	itt	mi
 80062c2:	232b      	movmi	r3, #43	; 0x2b
 80062c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062c8:	f89a 3000 	ldrb.w	r3, [sl]
 80062cc:	2b2a      	cmp	r3, #42	; 0x2a
 80062ce:	d015      	beq.n	80062fc <_vfiprintf_r+0x13c>
 80062d0:	4654      	mov	r4, sl
 80062d2:	2000      	movs	r0, #0
 80062d4:	f04f 0c0a 	mov.w	ip, #10
 80062d8:	9a07      	ldr	r2, [sp, #28]
 80062da:	4621      	mov	r1, r4
 80062dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062e0:	3b30      	subs	r3, #48	; 0x30
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d94e      	bls.n	8006384 <_vfiprintf_r+0x1c4>
 80062e6:	b1b0      	cbz	r0, 8006316 <_vfiprintf_r+0x156>
 80062e8:	9207      	str	r2, [sp, #28]
 80062ea:	e014      	b.n	8006316 <_vfiprintf_r+0x156>
 80062ec:	eba0 0308 	sub.w	r3, r0, r8
 80062f0:	fa09 f303 	lsl.w	r3, r9, r3
 80062f4:	4313      	orrs	r3, r2
 80062f6:	46a2      	mov	sl, r4
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	e7d2      	b.n	80062a2 <_vfiprintf_r+0xe2>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	1d19      	adds	r1, r3, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	9103      	str	r1, [sp, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	bfbb      	ittet	lt
 8006308:	425b      	neglt	r3, r3
 800630a:	f042 0202 	orrlt.w	r2, r2, #2
 800630e:	9307      	strge	r3, [sp, #28]
 8006310:	9307      	strlt	r3, [sp, #28]
 8006312:	bfb8      	it	lt
 8006314:	9204      	strlt	r2, [sp, #16]
 8006316:	7823      	ldrb	r3, [r4, #0]
 8006318:	2b2e      	cmp	r3, #46	; 0x2e
 800631a:	d10c      	bne.n	8006336 <_vfiprintf_r+0x176>
 800631c:	7863      	ldrb	r3, [r4, #1]
 800631e:	2b2a      	cmp	r3, #42	; 0x2a
 8006320:	d135      	bne.n	800638e <_vfiprintf_r+0x1ce>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	3402      	adds	r4, #2
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	9203      	str	r2, [sp, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfb8      	it	lt
 8006330:	f04f 33ff 	movlt.w	r3, #4294967295
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006410 <_vfiprintf_r+0x250>
 800633a:	2203      	movs	r2, #3
 800633c:	4650      	mov	r0, sl
 800633e:	7821      	ldrb	r1, [r4, #0]
 8006340:	f7ff fa88 	bl	8005854 <memchr>
 8006344:	b140      	cbz	r0, 8006358 <_vfiprintf_r+0x198>
 8006346:	2340      	movs	r3, #64	; 0x40
 8006348:	eba0 000a 	sub.w	r0, r0, sl
 800634c:	fa03 f000 	lsl.w	r0, r3, r0
 8006350:	9b04      	ldr	r3, [sp, #16]
 8006352:	3401      	adds	r4, #1
 8006354:	4303      	orrs	r3, r0
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	2206      	movs	r2, #6
 800635e:	482d      	ldr	r0, [pc, #180]	; (8006414 <_vfiprintf_r+0x254>)
 8006360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006364:	f7ff fa76 	bl	8005854 <memchr>
 8006368:	2800      	cmp	r0, #0
 800636a:	d03f      	beq.n	80063ec <_vfiprintf_r+0x22c>
 800636c:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <_vfiprintf_r+0x258>)
 800636e:	bb1b      	cbnz	r3, 80063b8 <_vfiprintf_r+0x1f8>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	3307      	adds	r3, #7
 8006374:	f023 0307 	bic.w	r3, r3, #7
 8006378:	3308      	adds	r3, #8
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637e:	443b      	add	r3, r7
 8006380:	9309      	str	r3, [sp, #36]	; 0x24
 8006382:	e767      	b.n	8006254 <_vfiprintf_r+0x94>
 8006384:	460c      	mov	r4, r1
 8006386:	2001      	movs	r0, #1
 8006388:	fb0c 3202 	mla	r2, ip, r2, r3
 800638c:	e7a5      	b.n	80062da <_vfiprintf_r+0x11a>
 800638e:	2300      	movs	r3, #0
 8006390:	f04f 0c0a 	mov.w	ip, #10
 8006394:	4619      	mov	r1, r3
 8006396:	3401      	adds	r4, #1
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	4620      	mov	r0, r4
 800639c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063a0:	3a30      	subs	r2, #48	; 0x30
 80063a2:	2a09      	cmp	r2, #9
 80063a4:	d903      	bls.n	80063ae <_vfiprintf_r+0x1ee>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0c5      	beq.n	8006336 <_vfiprintf_r+0x176>
 80063aa:	9105      	str	r1, [sp, #20]
 80063ac:	e7c3      	b.n	8006336 <_vfiprintf_r+0x176>
 80063ae:	4604      	mov	r4, r0
 80063b0:	2301      	movs	r3, #1
 80063b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063b6:	e7f0      	b.n	800639a <_vfiprintf_r+0x1da>
 80063b8:	ab03      	add	r3, sp, #12
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	462a      	mov	r2, r5
 80063be:	4630      	mov	r0, r6
 80063c0:	4b16      	ldr	r3, [pc, #88]	; (800641c <_vfiprintf_r+0x25c>)
 80063c2:	a904      	add	r1, sp, #16
 80063c4:	f7fd fcaa 	bl	8003d1c <_printf_float>
 80063c8:	4607      	mov	r7, r0
 80063ca:	1c78      	adds	r0, r7, #1
 80063cc:	d1d6      	bne.n	800637c <_vfiprintf_r+0x1bc>
 80063ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063d0:	07d9      	lsls	r1, r3, #31
 80063d2:	d405      	bmi.n	80063e0 <_vfiprintf_r+0x220>
 80063d4:	89ab      	ldrh	r3, [r5, #12]
 80063d6:	059a      	lsls	r2, r3, #22
 80063d8:	d402      	bmi.n	80063e0 <_vfiprintf_r+0x220>
 80063da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063dc:	f7ff f9cc 	bl	8005778 <__retarget_lock_release_recursive>
 80063e0:	89ab      	ldrh	r3, [r5, #12]
 80063e2:	065b      	lsls	r3, r3, #25
 80063e4:	f53f af12 	bmi.w	800620c <_vfiprintf_r+0x4c>
 80063e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ea:	e711      	b.n	8006210 <_vfiprintf_r+0x50>
 80063ec:	ab03      	add	r3, sp, #12
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <_vfiprintf_r+0x25c>)
 80063f6:	a904      	add	r1, sp, #16
 80063f8:	f7fd ff2c 	bl	8004254 <_printf_i>
 80063fc:	e7e4      	b.n	80063c8 <_vfiprintf_r+0x208>
 80063fe:	bf00      	nop
 8006400:	08006838 	.word	0x08006838
 8006404:	08006858 	.word	0x08006858
 8006408:	08006818 	.word	0x08006818
 800640c:	080069d4 	.word	0x080069d4
 8006410:	080069da 	.word	0x080069da
 8006414:	080069de 	.word	0x080069de
 8006418:	08003d1d 	.word	0x08003d1d
 800641c:	0800619b 	.word	0x0800619b

08006420 <_sbrk_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	2300      	movs	r3, #0
 8006424:	4d05      	ldr	r5, [pc, #20]	; (800643c <_sbrk_r+0x1c>)
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	f7fb fb58 	bl	8001ae0 <_sbrk>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_sbrk_r+0x1a>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_sbrk_r+0x1a>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000998 	.word	0x20000998

08006440 <__sread>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 f8e2 	bl	8006610 <_read_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	bfab      	itete	ge
 8006450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006452:	89a3      	ldrhlt	r3, [r4, #12]
 8006454:	181b      	addge	r3, r3, r0
 8006456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800645a:	bfac      	ite	ge
 800645c:	6563      	strge	r3, [r4, #84]	; 0x54
 800645e:	81a3      	strhlt	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__swrite>:
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	461f      	mov	r7, r3
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	4605      	mov	r5, r0
 800646c:	05db      	lsls	r3, r3, #23
 800646e:	460c      	mov	r4, r1
 8006470:	4616      	mov	r6, r2
 8006472:	d505      	bpl.n	8006480 <__swrite+0x1e>
 8006474:	2302      	movs	r3, #2
 8006476:	2200      	movs	r2, #0
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	f000 f898 	bl	80065b0 <_lseek_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	4632      	mov	r2, r6
 8006484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	4628      	mov	r0, r5
 800648c:	463b      	mov	r3, r7
 800648e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	f000 b817 	b.w	80064c8 <_write_r>

0800649a <__sseek>:
 800649a:	b510      	push	{r4, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 f885 	bl	80065b0 <_lseek_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	bf15      	itete	ne
 80064ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b6:	81a3      	strheq	r3, [r4, #12]
 80064b8:	bf18      	it	ne
 80064ba:	81a3      	strhne	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__sclose>:
 80064be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c2:	f000 b831 	b.w	8006528 <_close_r>
	...

080064c8 <_write_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	2200      	movs	r2, #0
 80064d2:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_write_r+0x20>)
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fa fd7a 	bl	8000fd0 <_write>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_write_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_write_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000998 	.word	0x20000998

080064ec <__assert_func>:
 80064ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064ee:	4614      	mov	r4, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <__assert_func+0x2c>)
 80064f4:	4605      	mov	r5, r0
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68d8      	ldr	r0, [r3, #12]
 80064fa:	b14c      	cbz	r4, 8006510 <__assert_func+0x24>
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <__assert_func+0x30>)
 80064fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006502:	9100      	str	r1, [sp, #0]
 8006504:	462b      	mov	r3, r5
 8006506:	4906      	ldr	r1, [pc, #24]	; (8006520 <__assert_func+0x34>)
 8006508:	f000 f81e 	bl	8006548 <fiprintf>
 800650c:	f000 f89f 	bl	800664e <abort>
 8006510:	4b04      	ldr	r3, [pc, #16]	; (8006524 <__assert_func+0x38>)
 8006512:	461c      	mov	r4, r3
 8006514:	e7f3      	b.n	80064fe <__assert_func+0x12>
 8006516:	bf00      	nop
 8006518:	20000650 	.word	0x20000650
 800651c:	080069e5 	.word	0x080069e5
 8006520:	080069f2 	.word	0x080069f2
 8006524:	08006a20 	.word	0x08006a20

08006528 <_close_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	2300      	movs	r3, #0
 800652c:	4d05      	ldr	r5, [pc, #20]	; (8006544 <_close_r+0x1c>)
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fb faa4 	bl	8001a80 <_close>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_close_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_close_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20000998 	.word	0x20000998

08006548 <fiprintf>:
 8006548:	b40e      	push	{r1, r2, r3}
 800654a:	b503      	push	{r0, r1, lr}
 800654c:	4601      	mov	r1, r0
 800654e:	ab03      	add	r3, sp, #12
 8006550:	4805      	ldr	r0, [pc, #20]	; (8006568 <fiprintf+0x20>)
 8006552:	f853 2b04 	ldr.w	r2, [r3], #4
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	f7ff fe31 	bl	80061c0 <_vfiprintf_r>
 800655e:	b002      	add	sp, #8
 8006560:	f85d eb04 	ldr.w	lr, [sp], #4
 8006564:	b003      	add	sp, #12
 8006566:	4770      	bx	lr
 8006568:	20000650 	.word	0x20000650

0800656c <_fstat_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	2300      	movs	r3, #0
 8006570:	4d06      	ldr	r5, [pc, #24]	; (800658c <_fstat_r+0x20>)
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	f7fb fa8c 	bl	8001a96 <_fstat>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d102      	bne.n	8006588 <_fstat_r+0x1c>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b103      	cbz	r3, 8006588 <_fstat_r+0x1c>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	20000998 	.word	0x20000998

08006590 <_isatty_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	2300      	movs	r3, #0
 8006594:	4d05      	ldr	r5, [pc, #20]	; (80065ac <_isatty_r+0x1c>)
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fb fa8a 	bl	8001ab4 <_isatty>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_isatty_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_isatty_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000998 	.word	0x20000998

080065b0 <_lseek_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	2200      	movs	r2, #0
 80065ba:	4d05      	ldr	r5, [pc, #20]	; (80065d0 <_lseek_r+0x20>)
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb fa82 	bl	8001ac8 <_lseek>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_lseek_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_lseek_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20000998 	.word	0x20000998

080065d4 <__ascii_mbtowc>:
 80065d4:	b082      	sub	sp, #8
 80065d6:	b901      	cbnz	r1, 80065da <__ascii_mbtowc+0x6>
 80065d8:	a901      	add	r1, sp, #4
 80065da:	b142      	cbz	r2, 80065ee <__ascii_mbtowc+0x1a>
 80065dc:	b14b      	cbz	r3, 80065f2 <__ascii_mbtowc+0x1e>
 80065de:	7813      	ldrb	r3, [r2, #0]
 80065e0:	600b      	str	r3, [r1, #0]
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	1e10      	subs	r0, r2, #0
 80065e6:	bf18      	it	ne
 80065e8:	2001      	movne	r0, #1
 80065ea:	b002      	add	sp, #8
 80065ec:	4770      	bx	lr
 80065ee:	4610      	mov	r0, r2
 80065f0:	e7fb      	b.n	80065ea <__ascii_mbtowc+0x16>
 80065f2:	f06f 0001 	mvn.w	r0, #1
 80065f6:	e7f8      	b.n	80065ea <__ascii_mbtowc+0x16>

080065f8 <__malloc_lock>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__malloc_lock+0x8>)
 80065fa:	f7ff b8bc 	b.w	8005776 <__retarget_lock_acquire_recursive>
 80065fe:	bf00      	nop
 8006600:	2000098c 	.word	0x2000098c

08006604 <__malloc_unlock>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__malloc_unlock+0x8>)
 8006606:	f7ff b8b7 	b.w	8005778 <__retarget_lock_release_recursive>
 800660a:	bf00      	nop
 800660c:	2000098c 	.word	0x2000098c

08006610 <_read_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	2200      	movs	r2, #0
 800661a:	4d05      	ldr	r5, [pc, #20]	; (8006630 <_read_r+0x20>)
 800661c:	602a      	str	r2, [r5, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f7fb fa11 	bl	8001a46 <_read>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_read_r+0x1e>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_read_r+0x1e>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	20000998 	.word	0x20000998

08006634 <__ascii_wctomb>:
 8006634:	4603      	mov	r3, r0
 8006636:	4608      	mov	r0, r1
 8006638:	b141      	cbz	r1, 800664c <__ascii_wctomb+0x18>
 800663a:	2aff      	cmp	r2, #255	; 0xff
 800663c:	d904      	bls.n	8006648 <__ascii_wctomb+0x14>
 800663e:	228a      	movs	r2, #138	; 0x8a
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	4770      	bx	lr
 8006648:	2001      	movs	r0, #1
 800664a:	700a      	strb	r2, [r1, #0]
 800664c:	4770      	bx	lr

0800664e <abort>:
 800664e:	2006      	movs	r0, #6
 8006650:	b508      	push	{r3, lr}
 8006652:	f000 f82b 	bl	80066ac <raise>
 8006656:	2001      	movs	r0, #1
 8006658:	f7fb f9eb 	bl	8001a32 <_exit>

0800665c <_raise_r>:
 800665c:	291f      	cmp	r1, #31
 800665e:	b538      	push	{r3, r4, r5, lr}
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	d904      	bls.n	8006670 <_raise_r+0x14>
 8006666:	2316      	movs	r3, #22
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	f04f 30ff 	mov.w	r0, #4294967295
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006672:	b112      	cbz	r2, 800667a <_raise_r+0x1e>
 8006674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006678:	b94b      	cbnz	r3, 800668e <_raise_r+0x32>
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f830 	bl	80066e0 <_getpid_r>
 8006680:	462a      	mov	r2, r5
 8006682:	4601      	mov	r1, r0
 8006684:	4620      	mov	r0, r4
 8006686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800668a:	f000 b817 	b.w	80066bc <_kill_r>
 800668e:	2b01      	cmp	r3, #1
 8006690:	d00a      	beq.n	80066a8 <_raise_r+0x4c>
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	d103      	bne.n	800669e <_raise_r+0x42>
 8006696:	2316      	movs	r3, #22
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	2001      	movs	r0, #1
 800669c:	e7e7      	b.n	800666e <_raise_r+0x12>
 800669e:	2400      	movs	r4, #0
 80066a0:	4628      	mov	r0, r5
 80066a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066a6:	4798      	blx	r3
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7e0      	b.n	800666e <_raise_r+0x12>

080066ac <raise>:
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <raise+0xc>)
 80066ae:	4601      	mov	r1, r0
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	f7ff bfd3 	b.w	800665c <_raise_r>
 80066b6:	bf00      	nop
 80066b8:	20000650 	.word	0x20000650

080066bc <_kill_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	2300      	movs	r3, #0
 80066c0:	4d06      	ldr	r5, [pc, #24]	; (80066dc <_kill_r+0x20>)
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	f7fb f9a2 	bl	8001a12 <_kill>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d102      	bne.n	80066d8 <_kill_r+0x1c>
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	b103      	cbz	r3, 80066d8 <_kill_r+0x1c>
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	bd38      	pop	{r3, r4, r5, pc}
 80066da:	bf00      	nop
 80066dc:	20000998 	.word	0x20000998

080066e0 <_getpid_r>:
 80066e0:	f7fb b990 	b.w	8001a04 <_getpid>

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
